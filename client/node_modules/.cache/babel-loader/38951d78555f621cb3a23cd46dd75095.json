{"ast":null,"code":"import _objectSpread from\"/Users/yze/WebstormProjects/Mern/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _asyncToGenerator from\"/Users/yze/WebstormProjects/Mern/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/yze/WebstormProjects/Mern/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"/Users/yze/WebstormProjects/Mern/client/node_modules/@babel/runtime/regenerator/index.js\";/**\n * serve as an editing component for our records.\n * It will use a similar layout to the create component\n * and will eventually submit an update command to our server.\n */import React,{useState,useEffect}from\"react\";import{useParams,useNavigate}from\"react-router\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function Edit(){var _useState=useState({name:\"\",position:\"\",level:\"\",records:[]}),_useState2=_slicedToArray(_useState,2),form=_useState2[0],setForm=_useState2[1];/**\n     * The useParams hook returns an object of key/value pairs of the dynamic params from the current URL\n     * that were matched by the <Route path>.\n     * Child routes inherit all params from their parent routes.\n     */var params=useParams();var navigate=useNavigate();useEffect(function(){function fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var id,response,message,record;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:id=params.id.toString();_context.next=3;return fetch(\"http://localhost:5001/record/\".concat(params.id.toString()));case 3:response=_context.sent;if(response.ok){_context.next=8;break;}message=\"An error has occured: \".concat(response.statusText);window.alert(message);return _context.abrupt(\"return\");case 8:_context.next=10;return response.json();case 10:record=_context.sent;if(record){_context.next=15;break;}window.alert(\"Record with id \".concat(id,\" not found\"));navigate(\"/\");return _context.abrupt(\"return\");case 15:setForm(record);case 16:case\"end\":return _context.stop();}}},_callee);}));return _fetchData.apply(this,arguments);}fetchData();return;},[params.id,navigate]);// These methods will update the state properties.\nfunction updateForm(value){return setForm(function(prev){return _objectSpread(_objectSpread({},prev),value);});}function onSubmit(_x){return _onSubmit.apply(this,arguments);}// This following section will display the form that takes input from the user to update the data.\nfunction _onSubmit(){_onSubmit=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(e){var editedPerson;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:e.preventDefault();editedPerson={name:form.name,position:form.position,level:form.level};// This will send a post request to update the data in the database.\n_context2.next=4;return fetch(\"http://localhost:5001/update/\".concat(params.id),{method:\"POST\",body:JSON.stringify(editedPerson),headers:{'Content-Type':'application/json'}});case 4:navigate(\"/\");case 5:case\"end\":return _context2.stop();}}},_callee2);}));return _onSubmit.apply(this,arguments);}return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Update Record\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:onSubmit,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"name\",children:\"Name: \"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",className:\"form-control\",id:\"name\",value:form.name,onChange:function onChange(e){return updateForm({name:e.target.value});}})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"position\",children:\"Position: \"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",className:\"form-control\",id:\"position\",value:form.position,onChange:function onChange(e){return updateForm({position:e.target.value});}})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-check form-check-inline\",children:[/*#__PURE__*/_jsx(\"input\",{className:\"form-check-input\",type:\"radio\",name:\"positionOptions\",id:\"positionIntern\",value:\"Intern\",checked:form.level===\"Intern\",onChange:function onChange(e){return updateForm({level:e.target.value});}}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"positionIntern\",className:\"form-check-label\",children:\"Intern\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-check form-check-inline\",children:[/*#__PURE__*/_jsx(\"input\",{className:\"form-check-input\",type:\"radio\",name:\"positionOptions\",id:\"positionJunior\",value:\"Junior\",checked:form.level===\"Junior\",onChange:function onChange(e){return updateForm({level:e.target.value});}}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"positionJunior\",className:\"form-check-label\",children:\"Junior\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-check form-check-inline\",children:[/*#__PURE__*/_jsx(\"input\",{className:\"form-check-input\",type:\"radio\",name:\"positionOptions\",id:\"positionSenior\",value:\"Senior\",checked:form.level===\"Senior\",onChange:function onChange(e){return updateForm({level:e.target.value});}}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"positionSenior\",className:\"form-check-label\",children:\"Senior\"})]})]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"div\",{className:\"form-group\",children:/*#__PURE__*/_jsx(\"input\",{type:\"submit\",value:\"Update Record\",className:\"btn btn-primary\"})})]})]});}","map":{"version":3,"sources":["/Users/yze/WebstormProjects/Mern/client/src/components/edit.js"],"names":["React","useState","useEffect","useParams","useNavigate","Edit","name","position","level","records","form","setForm","params","navigate","fetchData","id","toString","fetch","response","ok","message","statusText","window","alert","json","record","updateForm","value","prev","onSubmit","e","preventDefault","editedPerson","method","body","JSON","stringify","headers","target"],"mappings":"sfAAA;AACA;AACA;AACA;AACA,GACA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,OAASC,SAAT,CAAoBC,WAApB,KAAuC,cAAvC,C,wFAEA,cAAe,SAASC,CAAAA,IAAT,EAAgB,CAC3B,cAAwBJ,QAAQ,CAAC,CAC7BK,IAAI,CAAE,EADuB,CAE7BC,QAAQ,CAAE,EAFmB,CAG7BC,KAAK,CAAE,EAHsB,CAI7BC,OAAO,CAAE,EAJoB,CAAD,CAAhC,wCAAOC,IAAP,eAAaC,OAAb,eAOA;AACJ;AACA;AACA;AACA,OACI,GAAMC,CAAAA,MAAM,CAAGT,SAAS,EAAxB,CACA,GAAMU,CAAAA,QAAQ,CAAGT,WAAW,EAA5B,CAEAF,SAAS,CAAC,UAAM,SACGY,CAAAA,SADH,qIACZ,kKACUC,EADV,CACeH,MAAM,CAACG,EAAP,CAAUC,QAAV,EADf,uBAE2BC,CAAAA,KAAK,wCAAiCL,MAAM,CAACG,EAAP,CAAUC,QAAV,EAAjC,EAFhC,QAEUE,QAFV,kBAISA,QAAQ,CAACC,EAJlB,yBAKcC,OALd,iCAKiDF,QAAQ,CAACG,UAL1D,EAMQC,MAAM,CAACC,KAAP,CAAaH,OAAb,EANR,+DAUyBF,CAAAA,QAAQ,CAACM,IAAT,EAVzB,SAUUC,MAVV,kBAWSA,MAXT,0BAYQH,MAAM,CAACC,KAAP,0BAA+BR,EAA/B,gBACAF,QAAQ,CAAC,GAAD,CAAR,CAbR,yCAiBIF,OAAO,CAACc,MAAD,CAAP,CAjBJ,uDADY,4CAqBZX,SAAS,GAET,OACH,CAxBQ,CAwBN,CAACF,MAAM,CAACG,EAAR,CAAYF,QAAZ,CAxBM,CAAT,CA0BA;AACA,QAASa,CAAAA,UAAT,CAAoBC,KAApB,CAA2B,CACvB,MAAOhB,CAAAA,OAAO,CAAC,SAACiB,IAAD,CAAU,CACrB,sCAAYA,IAAZ,EAAqBD,KAArB,EACH,CAFa,CAAd,CAGH,CA/C0B,QAiDZE,CAAAA,QAjDY,6CAqE3B;AArE2B,uFAiD3B,kBAAwBC,CAAxB,uIACIA,CAAC,CAACC,cAAF,GACMC,YAFV,CAEyB,CACjB1B,IAAI,CAAEI,IAAI,CAACJ,IADM,CAEjBC,QAAQ,CAAEG,IAAI,CAACH,QAFE,CAGjBC,KAAK,CAAEE,IAAI,CAACF,KAHK,CAFzB,CAQI;AARJ,uBASUS,CAAAA,KAAK,wCAAiCL,MAAM,CAACG,EAAxC,EAA8C,CACrDkB,MAAM,CAAE,MAD6C,CAErDC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAeJ,YAAf,CAF+C,CAGrDK,OAAO,CAAE,CACL,eAAgB,kBADX,CAH4C,CAA9C,CATf,QAiBIxB,QAAQ,CAAC,GAAD,CAAR,CAjBJ,wDAjD2B,2CAsE3B,mBACI,oCACI,qCADJ,cAEI,cAAM,QAAQ,CAAEgB,QAAhB,wBACI,aAAK,SAAS,CAAC,YAAf,wBACI,cAAO,OAAO,CAAC,MAAf,oBADJ,cAEI,cACI,IAAI,CAAC,MADT,CAEI,SAAS,CAAC,cAFd,CAGI,EAAE,CAAC,MAHP,CAII,KAAK,CAAEnB,IAAI,CAACJ,IAJhB,CAKI,QAAQ,CAAE,kBAACwB,CAAD,QAAOJ,CAAAA,UAAU,CAAC,CAAEpB,IAAI,CAAEwB,CAAC,CAACQ,MAAF,CAASX,KAAjB,CAAD,CAAjB,EALd,EAFJ,GADJ,cAWI,aAAK,SAAS,CAAC,YAAf,wBACI,cAAO,OAAO,CAAC,UAAf,wBADJ,cAEI,cACI,IAAI,CAAC,MADT,CAEI,SAAS,CAAC,cAFd,CAGI,EAAE,CAAC,UAHP,CAII,KAAK,CAAEjB,IAAI,CAACH,QAJhB,CAKI,QAAQ,CAAE,kBAACuB,CAAD,QAAOJ,CAAAA,UAAU,CAAC,CAAEnB,QAAQ,CAAEuB,CAAC,CAACQ,MAAF,CAASX,KAArB,CAAD,CAAjB,EALd,EAFJ,GAXJ,cAqBI,aAAK,SAAS,CAAC,YAAf,wBACI,aAAK,SAAS,CAAC,8BAAf,wBACI,cACI,SAAS,CAAC,kBADd,CAEI,IAAI,CAAC,OAFT,CAGI,IAAI,CAAC,iBAHT,CAII,EAAE,CAAC,gBAJP,CAKI,KAAK,CAAC,QALV,CAMI,OAAO,CAAEjB,IAAI,CAACF,KAAL,GAAe,QAN5B,CAOI,QAAQ,CAAE,kBAACsB,CAAD,QAAOJ,CAAAA,UAAU,CAAC,CAAElB,KAAK,CAAEsB,CAAC,CAACQ,MAAF,CAASX,KAAlB,CAAD,CAAjB,EAPd,EADJ,cAUI,cAAO,OAAO,CAAC,gBAAf,CAAgC,SAAS,CAAC,kBAA1C,oBAVJ,GADJ,cAaI,aAAK,SAAS,CAAC,8BAAf,wBACI,cACI,SAAS,CAAC,kBADd,CAEI,IAAI,CAAC,OAFT,CAGI,IAAI,CAAC,iBAHT,CAII,EAAE,CAAC,gBAJP,CAKI,KAAK,CAAC,QALV,CAMI,OAAO,CAAEjB,IAAI,CAACF,KAAL,GAAe,QAN5B,CAOI,QAAQ,CAAE,kBAACsB,CAAD,QAAOJ,CAAAA,UAAU,CAAC,CAAElB,KAAK,CAAEsB,CAAC,CAACQ,MAAF,CAASX,KAAlB,CAAD,CAAjB,EAPd,EADJ,cAUI,cAAO,OAAO,CAAC,gBAAf,CAAgC,SAAS,CAAC,kBAA1C,oBAVJ,GAbJ,cAyBI,aAAK,SAAS,CAAC,8BAAf,wBACI,cACI,SAAS,CAAC,kBADd,CAEI,IAAI,CAAC,OAFT,CAGI,IAAI,CAAC,iBAHT,CAII,EAAE,CAAC,gBAJP,CAKI,KAAK,CAAC,QALV,CAMI,OAAO,CAAEjB,IAAI,CAACF,KAAL,GAAe,QAN5B,CAOI,QAAQ,CAAE,kBAACsB,CAAD,QAAOJ,CAAAA,UAAU,CAAC,CAAElB,KAAK,CAAEsB,CAAC,CAACQ,MAAF,CAASX,KAAlB,CAAD,CAAjB,EAPd,EADJ,cAUI,cAAO,OAAO,CAAC,gBAAf,CAAgC,SAAS,CAAC,kBAA1C,oBAVJ,GAzBJ,GArBJ,cA2DI,aA3DJ,cA6DI,YAAK,SAAS,CAAC,YAAf,uBACI,cACI,IAAI,CAAC,QADT,CAEI,KAAK,CAAC,eAFV,CAGI,SAAS,CAAC,iBAHd,EADJ,EA7DJ,GAFJ,GADJ,CA0EH","sourcesContent":["/**\n * serve as an editing component for our records.\n * It will use a similar layout to the create component\n * and will eventually submit an update command to our server.\n */\nimport React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router\";\n\nexport default function Edit() {\n    const [form, setForm] = useState({\n        name: \"\",\n        position: \"\",\n        level: \"\",\n        records: [],\n    });\n\n    /**\n     * The useParams hook returns an object of key/value pairs of the dynamic params from the current URL\n     * that were matched by the <Route path>.\n     * Child routes inherit all params from their parent routes.\n     */\n    const params = useParams();\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        async function fetchData() {\n            const id = params.id.toString();\n            const response = await fetch(`http://localhost:5001/record/${params.id.toString()}`);\n\n            if (!response.ok) {\n                const message = `An error has occured: ${response.statusText}`;\n                window.alert(message);\n                return;\n            }\n\n            const record = await response.json();\n            if (!record) {\n                window.alert(`Record with id ${id} not found`);\n                navigate(\"/\");\n                return;\n            }\n\n            setForm(record);\n        }\n\n        fetchData();\n\n        return;\n    }, [params.id, navigate]);\n\n    // These methods will update the state properties.\n    function updateForm(value) {\n        return setForm((prev) => {\n            return { ...prev, ...value };\n        });\n    }\n\n    async function onSubmit(e) {\n        e.preventDefault();\n        const editedPerson = {\n            name: form.name,\n            position: form.position,\n            level: form.level,\n        };\n\n        // This will send a post request to update the data in the database.\n        await fetch(`http://localhost:5001/update/${params.id}`, {\n            method: \"POST\",\n            body: JSON.stringify(editedPerson),\n            headers: {\n                'Content-Type': 'application/json'\n            },\n        });\n\n        navigate(\"/\");\n    }\n\n    // This following section will display the form that takes input from the user to update the data.\n    return (\n        <div>\n            <h3>Update Record</h3>\n            <form onSubmit={onSubmit}>\n                <div className=\"form-group\">\n                    <label htmlFor=\"name\">Name: </label>\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"name\"\n                        value={form.name}\n                        onChange={(e) => updateForm({ name: e.target.value })}\n                    />\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"position\">Position: </label>\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"position\"\n                        value={form.position}\n                        onChange={(e) => updateForm({ position: e.target.value })}\n                    />\n                </div>\n                <div className=\"form-group\">\n                    <div className=\"form-check form-check-inline\">\n                        <input\n                            className=\"form-check-input\"\n                            type=\"radio\"\n                            name=\"positionOptions\"\n                            id=\"positionIntern\"\n                            value=\"Intern\"\n                            checked={form.level === \"Intern\"}\n                            onChange={(e) => updateForm({ level: e.target.value })}\n                        />\n                        <label htmlFor=\"positionIntern\" className=\"form-check-label\">Intern</label>\n                    </div>\n                    <div className=\"form-check form-check-inline\">\n                        <input\n                            className=\"form-check-input\"\n                            type=\"radio\"\n                            name=\"positionOptions\"\n                            id=\"positionJunior\"\n                            value=\"Junior\"\n                            checked={form.level === \"Junior\"}\n                            onChange={(e) => updateForm({ level: e.target.value })}\n                        />\n                        <label htmlFor=\"positionJunior\" className=\"form-check-label\">Junior</label>\n                    </div>\n                    <div className=\"form-check form-check-inline\">\n                        <input\n                            className=\"form-check-input\"\n                            type=\"radio\"\n                            name=\"positionOptions\"\n                            id=\"positionSenior\"\n                            value=\"Senior\"\n                            checked={form.level === \"Senior\"}\n                            onChange={(e) => updateForm({ level: e.target.value })}\n                        />\n                        <label htmlFor=\"positionSenior\" className=\"form-check-label\">Senior</label>\n                    </div>\n                </div>\n                <br />\n\n                <div className=\"form-group\">\n                    <input\n                        type=\"submit\"\n                        value=\"Update Record\"\n                        className=\"btn btn-primary\"\n                    />\n                </div>\n            </form>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}