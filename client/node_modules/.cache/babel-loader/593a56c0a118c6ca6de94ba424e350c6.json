{"ast":null,"code":"var _jsxFileName = \"/Users/yze/WebstormProjects/Mern/client/src/components/questionarie.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Formik, useField, useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { useNavigate } from \"react-router\";\nimport { Badge, Button, Form } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Questionnaire() {\n  _s();\n\n  // const navigate = useNavigate();\n  const formik = useFormik({\n    initialValues: {\n      q1: false,\n      q2: false,\n      sq1: '',\n      sq2: '',\n      sq3: '' // firstName: '',\n      // lastName: '',\n      // email: '',\n\n    },\n    validationSchema: Yup.object({\n      // q1: Yup.bool()\n      //     .required(\"1Choose one\")\n      //     .oneOf([true], 'Field 1 must be checked'),\n      //\n      // q2: Yup.bool()\n      //     .required(\"2Choose one\")\n      //     .oneOf([true], 'Field 2 must be checked'),\n      sq1: Yup.string().required(\"Field 1 must be checked\"),\n      sq2: Yup.string().required(\"Field 2 must be checked\"),\n      sq3: Yup.string().required(\"Field 3 must be checked\"),\n      sq4: Yup.string().required(\"Field 4 must be checked\"),\n      sq5: Yup.string().required(\"Field 5 must be checked\"),\n      sq6: Yup.string().required(\"Field 6 must be checked\"),\n      sq7: Yup.string().required(\"Field 7 must be checked\"),\n      sq8: Yup.string().required(\"Field 8 must be checked\"),\n      sq9: Yup.string().required(\"Field 9 must be checked\"),\n      sq10: Yup.string().required(\"Field 10 must be checked\") // firstName: Yup.string()\n      //     .max(15, 'Must be 15 characters or less')\n      //     .required('Required'),\n      // lastName: Yup.string()\n      //     .max(20, 'Must be 20 characters or less')\n      //     .required('Required'),\n      // email: Yup.string().email('Invalid email address').required('Required'),\n\n    }),\n    onSubmit: values => {\n      alert(JSON.stringify(values, null, 2));\n      formik.initialValues.q1 = false;\n      formik.initialValues.q2 = false;\n      formik.initialValues.sq1 = '';\n      formik.initialValues.sq2 = '';\n      formik.initialValues.sq3 = '';\n      formik.initialValues.sq4 = '';\n      formik.initialValues.sq5 = '';\n      formik.initialValues.sq6 = '';\n      formik.initialValues.sq7 = '';\n      formik.initialValues.sq8 = '';\n      formik.initialValues.sq9 = '';\n      formik.initialValues.sq10 = ''; // setID1('');\n      // setID2('');\n      // setID3('');\n\n      setFuns.forEach(func => {\n        func('');\n      });\n    }\n  }); // let [selectedID, setID] = React.useState({\n  //     p1:\"\",\n  //     p2:\"\",\n  //     p3:\"\",\n  //     p4:\"\",\n  //     p5:\"\",\n  // });\n\n  let [selectedID1, setID1] = React.useState(\"\");\n  let [selectedID2, setID2] = React.useState(\"\");\n  let [selectedID3, setID3] = React.useState(\"\");\n  let [selectedID4, setID4] = React.useState(\"\");\n  let [selectedID5, setID5] = React.useState(\"\");\n  let [selectedID6, setID6] = React.useState(\"\");\n  let [selectedID7, setID7] = React.useState(\"\");\n  let [selectedID8, setID8] = React.useState(\"\");\n  let [selectedID9, setID9] = React.useState(\"\");\n  let [selectedID10, setID10] = React.useState(\"\");\n  let setFuns = [setID1, setID2, setID3, setID4, setID5, setID6, setID7, setID8, setID9, setID10];\n  let selectedIDs = [selectedID1, selectedID2, selectedID3, selectedID4, selectedID5, selectedID6, selectedID7, selectedID8, selectedID9, selectedID10];\n\n  function Question(props) {\n    // let [selectedID, setID] = React.useState('');\n    // console.log(\"prop.pid:\"+props.qId)\n    // let thisId;\n    // switch (props.qId) {\n    //     case 1:\n    //         console.log(\"case11\")\n    //         thisId =  selectedID1\n    //         console.log(\"case11,,\"+thisId)\n    //     case 2:\n    //         thisId =  selectedID2\n    //     case 3:\n    //         thisId =  selectedID3\n    // }\n    // console.log(\"thisID:\"+thisId)\n    return /*#__PURE__*/_jsxDEV(Form.Group, {\n      className: \"mb-3\",\n      controlId: \"formBasicEmail\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        children: [\"Question \", props.qId, \": \", props.descri]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), ['Strongly Agree', 'Agree', 'netural', 'Slightly Disagree', 'Disagree', 'Strongly Disagree'].map(ques => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3\",\n        children: /*#__PURE__*/_jsxDEV(Form.Check, {\n          type: \"radio\",\n          id: `${ques}+${props.qId}`,\n          name: `${ques}+${props.qId}` // label={`${ques}+${props.qId === 1? selectedID1:selectedID2}`}\n          // label={`${ques}+${props.selectAns}`}\n          // checked={ques+props.qId === props.selectAns}\n          // checked={ques+props.qId === (props.qId === 1? selectedID1:selectedID2)}\n          ,\n          label: `${ques}+${props.selectId}`,\n          checked: ques + props.qId === props.selectId,\n          onChange: () => {\n            // formik.values[\"q\"+props.qId] = true;\n            formik.values[\"sq\" + props.qId] = ques;\n            setFuns[props.qId](ques + props.qId); // switch (props.qId){\n            //     case 1:\n            //         console.log(\"case1\")\n            //         setID1(ques+props.qId)\n            //         break\n            //     case 2:\n            //         console.log(\"case2\")\n            //         setID2(ques+props.qId)\n            //         break\n            //     case 3:\n            //         console.log(\"case3\")\n            //         setID3(ques+props.qId)\n            //         break\n            // }\n            // if (props.qId===1){\n            //     setID1(ques+props.qId)\n            //     console.log(\"onChange, ques+props.qId:\"+ques+props.qId+\", selectedID1:\"+selectedID1)\n            //\n            // }else{\n            //     setID2(ques+props.qId)\n            //     console.log(\"onChange, ques+props.qId:\"+ques+props.qId+\", selectedID2:\"+selectedID2)\n            // }\n            // setID(ques+props.qId)\n            // console.log(\"onChange, ques+props.qId:\"+ques+props.qId+\", selectedID:\"+selectedID)\n          } // onChange={formik.handleChange}\n          // onBlur={formik.handleBlur}\n          // value={formik.values[\"q\"+props.qId]}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 25\n        }, this)\n      }, `${ques}+${props.qId}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 21\n      }, this)), !formik.values[[\"sq\" + props.qId]] ? /*#__PURE__*/_jsxDEV(Badge, {\n        pill: true,\n        bg: \"danger\",\n        children: formik.errors[[\"sq\" + props.qId]]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 21\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this);\n  }\n\n  const [questions, setQuestions] = useState([]); // This method fetches the records from the database.\n  // useEffect(() => {\n  //     async function getQuestions() {\n  //         const response = await fetch(`http://localhost:5001/questionlist/`);\n  //\n  //         if (!response.ok) {\n  //             const message = `An error occured: ${response.statusText}`;\n  //             window.alert(message);\n  //             return;\n  //         }\n  //\n  //         const records = await response.json();\n  //         setQuestions(records);\n  //     }\n  //\n  //     getQuestions();\n  //\n  //     return;\n  // }, [questions.length]);\n\n  function shuffleArray(array) {\n    for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  }\n\n  async function getQuestions() {\n    const response = await fetch(`http://localhost:5001/questionlist/`);\n\n    if (!response.ok) {\n      const message = `An error occured: ${response.statusText}`;\n      window.alert(message);\n      return;\n    }\n\n    const records = await response.json();\n    shuffleArray(questions);\n    setQuestions(records.slice(0, 10));\n  }\n\n  function questionList() {\n    return questions.map((question, index) => {\n      index++;\n      console.log(\"question!!!: \" + question.questiontext);\n      console.log(\"index!!!: \" + index);\n      return /*#__PURE__*/_jsxDEV(Question, {\n        descri: question.questiontext,\n        qId: index,\n        selectId: selectedIDs[index] // deleteRecord={() => deleteRecord(record._id)}\n        // key={record._id}\n\n      }, question._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 17\n      }, this);\n    });\n  } // let\n\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: formik.handleSubmit,\n    onLoad: getQuestions,\n    children: [questionList(), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"submit\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 252,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Questionnaire, \"hKxlcG2qkEUTCnS/Xa2lhy+nR7k=\", false, function () {\n  return [useFormik];\n});\n\n_c = Questionnaire;\n\nvar _c;\n\n$RefreshReg$(_c, \"Questionnaire\");","map":{"version":3,"sources":["/Users/yze/WebstormProjects/Mern/client/src/components/questionarie.js"],"names":["React","useEffect","useState","Formik","useField","useFormik","Yup","useNavigate","Badge","Button","Form","Questionnaire","formik","initialValues","q1","q2","sq1","sq2","sq3","validationSchema","object","string","required","sq4","sq5","sq6","sq7","sq8","sq9","sq10","onSubmit","values","alert","JSON","stringify","setFuns","forEach","func","selectedID1","setID1","selectedID2","setID2","selectedID3","setID3","selectedID4","setID4","selectedID5","setID5","selectedID6","setID6","selectedID7","setID7","selectedID8","setID8","selectedID9","setID9","selectedID10","setID10","selectedIDs","Question","props","qId","descri","map","ques","selectId","errors","questions","setQuestions","shuffleArray","array","i","length","j","Math","floor","random","temp","getQuestions","response","fetch","ok","message","statusText","window","records","json","slice","questionList","question","index","console","log","questiontext","_id","handleSubmit"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {Formik, useField, useFormik} from 'formik';\nimport * as Yup from 'yup';\nimport {useNavigate} from \"react-router\";\nimport {Badge, Button, Form} from \"react-bootstrap\";\n\nexport default function Questionnaire() {\n    // const navigate = useNavigate();\n\n\n    const formik = useFormik({\n        initialValues: {\n            q1:false,\n            q2:false,\n            sq1:'',\n            sq2:'',\n            sq3:'',\n            // firstName: '',\n            // lastName: '',\n            // email: '',\n        },\n        validationSchema: Yup.object({\n            // q1: Yup.bool()\n            //     .required(\"1Choose one\")\n            //     .oneOf([true], 'Field 1 must be checked'),\n            //\n            // q2: Yup.bool()\n            //     .required(\"2Choose one\")\n            //     .oneOf([true], 'Field 2 must be checked'),\n\n            sq1: Yup.string()\n                .required(\"Field 1 must be checked\"),\n\n            sq2: Yup.string()\n                .required(\"Field 2 must be checked\"),\n\n            sq3: Yup.string()\n                .required(\"Field 3 must be checked\"),\n\n            sq4: Yup.string()\n                .required(\"Field 4 must be checked\"),\n\n            sq5: Yup.string()\n                .required(\"Field 5 must be checked\"),\n            sq6: Yup.string()\n                .required(\"Field 6 must be checked\"),\n            sq7: Yup.string()\n                .required(\"Field 7 must be checked\"),\n            sq8: Yup.string()\n                .required(\"Field 8 must be checked\"),\n            sq9: Yup.string()\n                .required(\"Field 9 must be checked\"),\n            sq10: Yup.string()\n                .required(\"Field 10 must be checked\"),\n\n            // firstName: Yup.string()\n            //     .max(15, 'Must be 15 characters or less')\n            //     .required('Required'),\n            // lastName: Yup.string()\n            //     .max(20, 'Must be 20 characters or less')\n            //     .required('Required'),\n            // email: Yup.string().email('Invalid email address').required('Required'),\n\n        }),\n\n        onSubmit: values => {\n\n            alert(JSON.stringify(values, null, 2));\n                formik.initialValues.q1 = false;\n                formik.initialValues.q2 = false;\n                formik.initialValues.sq1 = '';\n                formik.initialValues.sq2 = '';\n                formik.initialValues.sq3 = '';\n            formik.initialValues.sq4 = '';\n            formik.initialValues.sq5 = '';\n            formik.initialValues.sq6 = '';\n            formik.initialValues.sq7 = '';\n            formik.initialValues.sq8 = '';\n            formik.initialValues.sq9 = '';\n            formik.initialValues.sq10 = '';\n\n                // setID1('');\n                // setID2('');\n                // setID3('');\n            setFuns.forEach(func=>{\n                func('')\n            })\n        },\n    });\n\n\n    // let [selectedID, setID] = React.useState({\n    //     p1:\"\",\n    //     p2:\"\",\n    //     p3:\"\",\n    //     p4:\"\",\n    //     p5:\"\",\n    // });\n\n    let [selectedID1, setID1] = React.useState(\"\");\n    let [selectedID2, setID2] = React.useState(\"\");\n    let [selectedID3, setID3] = React.useState(\"\");\n    let [selectedID4, setID4] = React.useState(\"\");\n    let [selectedID5, setID5] = React.useState(\"\");\n    let [selectedID6, setID6] = React.useState(\"\");\n    let [selectedID7, setID7] = React.useState(\"\");\n    let [selectedID8, setID8] = React.useState(\"\");\n    let [selectedID9, setID9] = React.useState(\"\");\n    let [selectedID10, setID10] = React.useState(\"\");\n    let setFuns = [setID1, setID2, setID3,setID4,setID5,setID6,setID7,setID8,setID9,setID10]\n    let selectedIDs = [selectedID1, selectedID2, selectedID3,selectedID4,selectedID5,selectedID6,selectedID7,selectedID8,selectedID9,selectedID10]\n    function Question(props) {\n        // let [selectedID, setID] = React.useState('');\n        // console.log(\"prop.pid:\"+props.qId)\n        // let thisId;\n        // switch (props.qId) {\n        //     case 1:\n        //         console.log(\"case11\")\n        //         thisId =  selectedID1\n        //         console.log(\"case11,,\"+thisId)\n        //     case 2:\n        //         thisId =  selectedID2\n        //     case 3:\n        //         thisId =  selectedID3\n        // }\n        // console.log(\"thisID:\"+thisId)\n        return (\n            <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n                <Form.Label>Question {props.qId}: {props.descri}</Form.Label>\n                {['Strongly Agree', 'Agree', 'netural', 'Slightly Disagree', 'Disagree', 'Strongly Disagree'].map((ques) => (\n                    <div key={`${ques}+${props.qId}`} className=\"mb-3\">\n                        <Form.Check\n                            type=\"radio\"\n                            id={`${ques}+${props.qId}`}\n                            name={`${ques}+${props.qId}`}\n                            // label={`${ques}+${props.qId === 1? selectedID1:selectedID2}`}\n                            // label={`${ques}+${props.selectAns}`}\n                            // checked={ques+props.qId === props.selectAns}\n                            // checked={ques+props.qId === (props.qId === 1? selectedID1:selectedID2)}\n                            label={`${ques}+${props.selectId}`}\n                            checked={ques+props.qId === props.selectId}\n                            onChange={ () => {\n                                // formik.values[\"q\"+props.qId] = true;\n                                formik.values[\"sq\"+props.qId]= ques;\n                                setFuns[props.qId](ques+props.qId);\n                                // switch (props.qId){\n                                //     case 1:\n                                //         console.log(\"case1\")\n                                //         setID1(ques+props.qId)\n                                //         break\n                                //     case 2:\n                                //         console.log(\"case2\")\n                                //         setID2(ques+props.qId)\n                                //         break\n                                //     case 3:\n                                //         console.log(\"case3\")\n                                //         setID3(ques+props.qId)\n                                //         break\n                                // }\n                                // if (props.qId===1){\n                                //     setID1(ques+props.qId)\n                                //     console.log(\"onChange, ques+props.qId:\"+ques+props.qId+\", selectedID1:\"+selectedID1)\n                                //\n                                // }else{\n                                //     setID2(ques+props.qId)\n                                //     console.log(\"onChange, ques+props.qId:\"+ques+props.qId+\", selectedID2:\"+selectedID2)\n                                // }\n                                // setID(ques+props.qId)\n                                // console.log(\"onChange, ques+props.qId:\"+ques+props.qId+\", selectedID:\"+selectedID)\n                            }}\n                            // onChange={formik.handleChange}\n                            // onBlur={formik.handleBlur}\n                            // value={formik.values[\"q\"+props.qId]}\n                        />\n                    </div>\n                ))}\n                {/*{formik.touched[\"q\"+props.qId] && formik.errors[[\"q\"+props.qId]] ? (*/}\n                {/*    // <div>{formik.errors[[\"q\"+props.qId]]}</div>*/}\n                {!formik.values[[\"sq\"+props.qId]] ? (\n                    <Badge pill bg=\"danger\">\n                        {formik.errors[[\"sq\"+props.qId]]}\n                    </Badge>\n                ) : null}\n            </Form.Group>\n        )\n    }\n\n    const [questions, setQuestions] = useState([]);\n    // This method fetches the records from the database.\n    // useEffect(() => {\n    //     async function getQuestions() {\n    //         const response = await fetch(`http://localhost:5001/questionlist/`);\n    //\n    //         if (!response.ok) {\n    //             const message = `An error occured: ${response.statusText}`;\n    //             window.alert(message);\n    //             return;\n    //         }\n    //\n    //         const records = await response.json();\n    //         setQuestions(records);\n    //     }\n    //\n    //     getQuestions();\n    //\n    //     return;\n    // }, [questions.length]);\n\n    function shuffleArray(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Math.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n    }\n    async function getQuestions() {\n        const response = await fetch(`http://localhost:5001/questionlist/`);\n\n        if (!response.ok) {\n            const message = `An error occured: ${response.statusText}`;\n            window.alert(message);\n            return;\n        }\n\n        const records = await response.json();\n        shuffleArray(questions)\n\n        setQuestions(records.slice(0, 10));\n    }\n\n    function questionList() {\n        return questions.map((question,index) => {\n            index++;\n            console.log(\"question!!!: \" + question.questiontext)\n            console.log(\"index!!!: \" + index)\n            return (\n                <Question\n                    descri={question.questiontext}\n                    key={question._id}\n                    qId={index}\n                    selectId = {selectedIDs[index]}\n\n                    // deleteRecord={() => deleteRecord(record._id)}\n                    // key={record._id}\n                />\n            );\n        });\n    }\n    // let\n    return(\n    <Form onSubmit={formik.handleSubmit} onLoad={getQuestions}>\n        {/*<Question descri={\"q1 des\"}  qId={1} selectId = {selectedIDs[0]}  />*/}\n        {/*<Question descri={\"q2 des\"}  qId={2} selectId = {selectedID2} />*/}\n        {/*<Question descri={\"q3 des\"}  qId={3} selectId = {selectedID3} />*/}\n        {questionList()}\n\n        <Button type=\"submit\">Submit</Button>\n\n        {/*<Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">*/}\n        {/*    <Form.Label>Question 1: Caring for people who have suffered is an important virtue.</Form.Label>*/}\n        {/*    {['Strongly Agree', 'Agree','netural','Slightly Disagree','Disagree','Strongly Disagree'].map((ques) => (*/}\n        {/*        <div key={`${ques}`} className=\"mb-3\" >*/}\n        {/*            <Form.Check*/}\n        {/*                type=\"radio\"*/}\n        {/*                id={`${ques}`}*/}\n        {/*                name={`${ques}`}*/}\n        {/*                label={`${ques}`}*/}\n        {/*                checked={ques === selectedID}*/}\n        {/*                onChange={() => {*/}\n        {/*                    formik.values.q1 = true;*/}\n        {/*                    setID(ques)*/}\n        {/*                }}*/}\n        {/*            />*/}\n        {/*        </div>*/}\n        {/*    ))}*/}\n        {/*    {formik.touched.q1 && formik.errors.q1 ? (*/}\n        {/*        <div>{formik.errors.q1}</div>*/}\n        {/*    ) : null}*/}\n\n        {/*</Form.Group>*/}\n\n\n        {/*<label htmlFor=\"firstName\">First Name</label>*/}\n        {/*<input*/}\n        {/*    id=\"firstName\"*/}\n        {/*    name=\"firstName\"*/}\n        {/*    type=\"text\"*/}\n        {/*    onChange={formik.handleChange}*/}\n        {/*    onBlur={formik.handleBlur}*/}\n        {/*    value={formik.values.firstName}*/}\n        {/*/>*/}\n        {/*{formik.touched.firstName && formik.errors.firstName ? (*/}\n        {/*    <div>{formik.errors.firstName}</div>*/}\n        {/*) : null}*/}\n\n        {/*<label htmlFor=\"lastName\">Last Name</label>*/}\n        {/*<input*/}\n        {/*    id=\"lastName\"*/}\n        {/*    name=\"lastName\"*/}\n        {/*    type=\"text\"*/}\n        {/*    onChange={formik.handleChange}*/}\n        {/*    onBlur={formik.handleBlur}*/}\n        {/*    value={formik.values.lastName}*/}\n        {/*/>*/}\n        {/*{formik.touched.lastName && formik.errors.lastName ? (*/}\n        {/*    <div>{formik.errors.lastName}</div>*/}\n        {/*) : null}*/}\n        {/*<label htmlFor=\"email\">Email Address</label>*/}\n        {/*<input*/}\n        {/*    id=\"email\"*/}\n        {/*    name=\"email\"*/}\n        {/*    type=\"email\"*/}\n        {/*    onChange={formik.handleChange}*/}\n        {/*    onBlur={formik.handleBlur}*/}\n        {/*    value={formik.values.email}*/}\n        {/*/>*/}\n        {/*{formik.touched.email && formik.errors.email ? (*/}\n        {/*    <div>{formik.errors.email}</div>*/}\n        {/*) : null}*/}\n\n        {/*<Button type=\"submit\">Submit</Button>*/}\n    </Form>\n    )\n\n\n}"]},"metadata":{},"sourceType":"module"}