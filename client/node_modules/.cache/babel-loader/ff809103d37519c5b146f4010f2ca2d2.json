{"ast":null,"code":"var _jsxFileName = \"/Users/yze/WebstormProjects/Mern/client/src/components/questionarie.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Formik, useField, useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { useNavigate } from \"react-router\";\nimport { Badge, Button, Col, Container, Form, FormControl, Row, Stack } from \"react-bootstrap\";\nimport '../question.css';\nimport { string } from \"yup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Questionnaire() {\n  _s();\n\n  // const navigate = useNavigate();\n  const [entryTime, setEntryTime] = React.useState(Date.now());\n  const [form, setForm] = useState({\n    time: 0,\n    ip: \"\",\n    qMap: {} // question: {\n    //     name:\"\",\n    //     ans:\"\"},\n\n  });\n  const formik = useFormik({\n    initialValues: {\n      // q1:false,\n      // q2:false,\n      question0: {\n        name: ' ',\n        ans: ' '\n      },\n      question1: {\n        name: ' ',\n        ans: ' '\n      },\n      question2: {\n        name: ' ',\n        ans: ' '\n      },\n      question3: {\n        name: ' ',\n        ans: ' '\n      },\n      question4: {\n        name: ' ',\n        ans: ' '\n      },\n      question5: {\n        name: ' ',\n        ans: ' '\n      },\n      question6: {\n        name: ' ',\n        ans: ' '\n      },\n      question7: {\n        name: ' ',\n        ans: ' '\n      },\n      question8: {\n        name: ' ',\n        ans: ' '\n      },\n      question9: {\n        name: ' ',\n        ans: ' '\n      } // sq0:'',\n      // sq1:'',\n      // sq2:'',\n      // sq3:'',\n      // sq4:'',\n      // sq5:'',\n      // sq6:'',\n      // sq7:'',\n      // sq8:'',\n      // sq9:'',\n      // firstName: '',\n      // lastName: '',\n      // email: '',\n\n    },\n    validationSchema: Yup.object({\n      // q1: Yup.bool()\n      //     .required(\"1Choose one\")\n      //     .oneOf([true], 'Field 1 must be checked'),\n      //\n      // q2: Yup.bool()\n      //     .required(\"2Choose one\")\n      //     .oneOf([true], 'Field 2 must be checked'),\n      question0: Yup.object({\n        name: Yup.string().required(\"xxx\"),\n        ans: Yup.string().min(3, \"Q1sss\").required(\"Q1 unchecked\")\n      }).required(\"Q1xxx\"),\n      question1: Yup.object({\n        name: Yup.string().required(\"xxx\"),\n        ans: Yup.string().min(3).required(\"Q2 unchecked\")\n      }),\n      question2: Yup.object({\n        name: Yup.string().required(\"xxx\"),\n        ans: Yup.string().min(3).required(\"Q3 unchecked\")\n      }),\n      question3: Yup.object({\n        name: Yup.string().required(\"xxx\"),\n        ans: Yup.string().min(3).required(\"Q4 unchecked\")\n      }),\n      question4: Yup.object({\n        name: Yup.string().required(\"xxx\"),\n        ans: Yup.string().min(3).required(\"Q5 unchecked\")\n      }),\n      question5: Yup.object({\n        name: Yup.string().required(\"xxx\"),\n        ans: Yup.string().min(3).required(\"Q6 unchecked\")\n      }),\n      question6: Yup.object({\n        name: Yup.string().required(\"xxx\"),\n        ans: Yup.string().min(3).required(\"Q7 unchecked\")\n      }),\n      question7: Yup.object({\n        name: Yup.string().required(\"xxx\"),\n        ans: Yup.string().min(3).required(\"Q8 unchecked\")\n      }),\n      question8: Yup.object({\n        name: Yup.string().required(\"xxx\"),\n        ans: Yup.string().min(3).required(\"Q9 unchecked\")\n      }),\n      question9: Yup.object({\n        name: Yup.string().required(\"xxx\"),\n        ans: Yup.string().min(3).required(\"Q10 unchecked\")\n      }) // question1: Yup.object().shape({\n      //     ans: string().required(\"Q2 unchecked\"),\n      // })\n      // sq0: Yup.string()\n      //     .required(\"Q1 unchecked\"),\n      //\n      // sq1: Yup.string()\n      //     .required(\"Q2 unchecked\"),\n      //\n      // sq2: Yup.string()\n      //     .required(\"Q3 unchecked\"),\n      //\n      // sq3: Yup.string()\n      //     .required(\"Q4 unchecked\"),\n      //\n      // sq4: Yup.string()\n      //     .required(\"Q5 unchecked\"),\n      //\n      // sq5: Yup.string()\n      //     .required(\"Q6 unchecked\"),\n      // sq6: Yup.string()\n      //     .required(\"Q7 unchecked\"),\n      // sq7: Yup.string()\n      //     .required(\"Q8 unchecked\"),\n      // sq8: Yup.string()\n      //     .required(\"Q9 unchecked\"),\n      // sq9: Yup.string()\n      //     .required(\"Q10 unchecked\"),\n      // firstName: Yup.string()\n      //     .max(15, 'Must be 15 characters or less')\n      //     .required('Required'),\n      // lastName: Yup.string()\n      //     .max(20, 'Must be 20 characters or less')\n      //     .required('Required'),\n      // email: Yup.string().email('Invalid email address').required('Required'),\n\n    }),\n    onSubmit: async values => {\n      let endTime = Date.now();\n      console.log(\"end time!!!\" + endTime);\n      console.log(\"entry time!!!\" + entryTime);\n      let millis = Date.now() - entryTime;\n      console.log(\"total time!!!\" + millis); //     const newAnswer = {...form};\n      //     await fetch(\"http://localhost:5001/question/add\", {\n      //         method: \"POST\",\n      //         headers: {\n      //             \"Content-Type\": \"application/json\",\n      //         },\n      //         body: JSON.stringify(newAnswer),\n      //     })\n      //         .catch(error => {\n      //             window.alert(error);\n      //             return;\n      //         });\n      //     // values.question1.name\n      //     let temMap = new Map(\n      //         [\"q1\",values.sq0],\n      //     )\n      //     temMap.add\n      //     setForm({millis,\n      //         \"9.9.9\",\n      //     {\"q1\":\"agree\"}\n      //     }\n      // );\n\n      alert(JSON.stringify(values, null, 2));\n      Object.keys(formik.initialValues).forEach(function (key) {\n        formik.initialValues[key] = \" \";\n      }); // [formik.initialValues].forEach(item =>{\n      //     item.name = ' '\n      //     item.ans = ' '\n      // })\n      // formik.initialValues.question0.name=' ';\n      // formik.initialValues.question0.ans=' ';\n      // formik.initialValues.question1.name=' ';\n      // formik.initialValues.question1.ans=' ';\n      // formik.initialValues.question2.name=' ';\n      // formik.initialValues.question2.ans=' ';\n      // formik.initialValues.question3.name=' ';\n      // formik.initialValues.question3.ans=' ';\n      // formik.initialValues.question9.name=' ';\n      // formik.initialValues.question9.ans=' ';\n\n      formik.initialValues.sq0 = '';\n      formik.initialValues.sq1 = '';\n      formik.initialValues.sq2 = '';\n      formik.initialValues.sq3 = '';\n      formik.initialValues.sq4 = '';\n      formik.initialValues.sq5 = '';\n      formik.initialValues.sq6 = '';\n      formik.initialValues.sq7 = '';\n      formik.initialValues.sq8 = '';\n      formik.initialValues.sq9 = '';\n      setFuns.forEach(func => {\n        func('');\n      });\n    }\n  }); // let [selectedID, setID] = React.useState({\n  //     p1:\"\",\n  //     p2:\"\",\n  //     p3:\"\",\n  //     p4:\"\",\n  //     p5:\"\",\n  // });\n\n  let [selectedID0, setID0] = React.useState(\"\");\n  let [selectedID1, setID1] = React.useState(\"\");\n  let [selectedID2, setID2] = React.useState(\"\");\n  let [selectedID3, setID3] = React.useState(\"\");\n  let [selectedID4, setID4] = React.useState(\"\");\n  let [selectedID5, setID5] = React.useState(\"\");\n  let [selectedID6, setID6] = React.useState(\"\");\n  let [selectedID7, setID7] = React.useState(\"\");\n  let [selectedID8, setID8] = React.useState(\"\");\n  let [selectedID9, setID9] = React.useState(\"\");\n  let setFuns = [setID0, setID1, setID2, setID3, setID4, setID5, setID6, setID7, setID8, setID9];\n  let selectedIDs = [selectedID0, selectedID1, selectedID2, selectedID3, selectedID4, selectedID5, selectedID6, selectedID7, selectedID8, selectedID9];\n\n  function Question(props) {\n    let anss = formik.values[[\"question\" + props.qId]].ans;\n    console.log(\"anss!!:\" + anss + \", index, \" + props.qId + \", length:\" + formik.values[[\"question\" + props.qId]].ans.length); // console.log(formik.errors.question0)\n\n    return /*#__PURE__*/_jsxDEV(Form.Group, {\n      controlId: \"formBasicEmail\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        className: \"qTitle\",\n        children: [\"Q\", props.qId + 1, \": \", props.descri, formik.values[[\"question\" + props.qId]].ans.length < 2 ? /*#__PURE__*/_jsxDEV(Badge, {\n          pill: true,\n          bg: \"danger\",\n          children: \"unchecked\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 25\n        }, this) : \"ok\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        className: \"qCard\",\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          sm: 4,\n          md: 4,\n          children: ['Strongly Agree', 'Slightly Agree', 'Agree', 'Neutral', 'Slightly Disagree', 'Disagree', 'Strongly Disagree'].map(ques => /*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(Form.Check, {\n              type: \"radio\",\n              id: `${ques}+${props.qId}`,\n              name: `${ques}+${props.qId}` // label={`${ques}+${props.qId === 1? selectedID1:selectedID2}`}\n              // label={`${ques}+${props.selectAns}`}\n              // checked={ques+props.qId === props.selectAns}\n              // checked={ques+props.qId === (props.qId === 1? selectedID1:selectedID2)}\n              ,\n              label: `${ques}` //+${props.selectId}\n              ,\n              checked: ques + props.qId === props.selectId,\n              onChange: () => {\n                // formik.values[\"sq\"+props.qId]= ques;\n                formik.values[\"question\" + props.qId].name = props.qName; //+props.qId\n\n                formik.values[\"question\" + props.qId].ans = ques;\n                setFuns[props.qId](ques + props.qId); // switch (props.qId){\n                //     case 1:\n                //         console.log(\"case1\")\n                //         setID1(ques+props.qId)\n                //         break\n                //     case 2:\n                //         console.log(\"case2\")\n                //         setID2(ques+props.qId)\n                //         break\n                //     case 3:\n                //         console.log(\"case3\")\n                //         setID3(ques+props.qId)\n                //         break\n                // }\n                // if (props.qId===1){\n                //     setID1(ques+props.qId)\n                //     console.log(\"onChange, ques+props.qId:\"+ques+props.qId+\", selectedID1:\"+selectedID1)\n                //\n                // }else{\n                //     setID2(ques+props.qId)\n                //     console.log(\"onChange, ques+props.qId:\"+ques+props.qId+\", selectedID2:\"+selectedID2)\n                // }\n                // setID(ques+props.qId)\n                // console.log(\"onChange, ques+props.qId:\"+ques+props.qId+\", selectedID:\"+selectedID)\n              } // onChange={formik.handleChange}\n              // onBlur={formik.handleBlur}\n              // value={formik.values[\"q\"+props.qId]}\n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 25\n            }, this)\n          }, `${ques}+${props.qId}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 21\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 13\n    }, this);\n  }\n\n  const [questions, setQuestions] = useState([]);\n  let firstLoad = true; // This method fetches the records from the database.\n\n  useEffect(() => {\n    if (!firstLoad) {\n      return;\n    }\n\n    setEntryTime(Date.now());\n    console.log(\"entryTime:\" + entryTime); // currentTime = Date.now();\n    // console.log(\"time!!!\"+currentTime)\n\n    firstLoad = false;\n\n    async function getQuestions() {\n      const response = await fetch(`http://localhost:5001/questionlist/`);\n\n      if (!response.ok) {\n        const message = `An error occured: ${response.statusText}`;\n        window.alert(message);\n        return;\n      }\n\n      const records = await response.json();\n      shuffleArray(records);\n      setQuestions(records.slice(0, 10));\n    }\n\n    getQuestions();\n    return;\n  }, [questions.length]);\n\n  function shuffleArray(array) {\n    for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  }\n\n  function questionList() {\n    return questions.map((question, index) => {\n      // console.log(\"question!!!: \" + question.questiontext)\n      // console.log(\"index!!!: \" + index)\n      return /*#__PURE__*/_jsxDEV(Question, {\n        descri: question.questiontext,\n        qId: index,\n        qName: question.varname,\n        selectId: selectedIDs[index++] // deleteRecord={() => deleteRecord(record._id)}\n        // key={record._id}\n\n      }, question._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 17\n      }, this);\n    });\n  } // let\n\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    className: \"col-sm-12 col-md-12 mx-2\",\n    onSubmit: formik.handleSubmit,\n    children: /*#__PURE__*/_jsxDEV(Stack, {\n      gap: 2,\n      className: \"mx-auto\",\n      children: [questionList(), /*#__PURE__*/_jsxDEV(Container, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: \"col-4 mx-auto my-4 \",\n        variant: \"secondary\",\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 411,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Questionnaire, \"6FqEDI8ON05te6sMNacIyMK1AI8=\", false, function () {\n  return [useFormik];\n});\n\n_c = Questionnaire;\n\nvar _c;\n\n$RefreshReg$(_c, \"Questionnaire\");","map":{"version":3,"sources":["/Users/yze/WebstormProjects/Mern/client/src/components/questionarie.js"],"names":["React","useEffect","useState","Formik","useField","useFormik","Yup","useNavigate","Badge","Button","Col","Container","Form","FormControl","Row","Stack","string","Questionnaire","entryTime","setEntryTime","Date","now","form","setForm","time","ip","qMap","formik","initialValues","question0","name","ans","question1","question2","question3","question4","question5","question6","question7","question8","question9","validationSchema","object","required","min","onSubmit","values","endTime","console","log","millis","alert","JSON","stringify","Object","keys","forEach","key","sq0","sq1","sq2","sq3","sq4","sq5","sq6","sq7","sq8","sq9","setFuns","func","selectedID0","setID0","selectedID1","setID1","selectedID2","setID2","selectedID3","setID3","selectedID4","setID4","selectedID5","setID5","selectedID6","setID6","selectedID7","setID7","selectedID8","setID8","selectedID9","setID9","selectedIDs","Question","props","anss","qId","length","descri","map","ques","selectId","qName","questions","setQuestions","firstLoad","getQuestions","response","fetch","ok","message","statusText","window","records","json","shuffleArray","slice","array","i","j","Math","floor","random","temp","questionList","question","index","questiontext","varname","_id","handleSubmit"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {Formik, useField, useFormik} from 'formik';\nimport * as Yup from 'yup';\nimport {useNavigate} from \"react-router\";\nimport {Badge, Button, Col, Container, Form, FormControl, Row, Stack} from \"react-bootstrap\";\nimport '../question.css';\nimport {string} from \"yup\";\n\nexport default function Questionnaire() {\n    // const navigate = useNavigate();\n    const [entryTime, setEntryTime] = React.useState(Date.now());\n    const [form, setForm] = useState({\n        time: 0,\n        ip: \"\",\n        qMap:{},\n        // question: {\n        //     name:\"\",\n        //     ans:\"\"},\n    });\n\n\n    const formik = useFormik({\n        initialValues: {\n            // q1:false,\n            // q2:false,\n            question0:{\n                name:' ',\n                ans:' '\n            },\n            question1:{\n                name:' ',\n                ans:' '\n            },\n            question2:{\n                name:' ',\n                ans:' '\n            },\n            question3:{\n                name:' ',\n                ans:' '\n            },\n            question4:{\n                name:' ',\n                ans:' '\n            },\n            question5:{\n                name:' ',\n                ans:' '\n            },\n            question6:{\n                name:' ',\n                ans:' '\n            },\n            question7:{\n                name:' ',\n                ans:' '\n            },\n            question8:{\n                name:' ',\n                ans:' '\n            },\n            question9:{\n                name:' ',\n                ans:' '\n            },\n\n            // sq0:'',\n            // sq1:'',\n            // sq2:'',\n            // sq3:'',\n            // sq4:'',\n            // sq5:'',\n            // sq6:'',\n            // sq7:'',\n            // sq8:'',\n            // sq9:'',\n            // firstName: '',\n            // lastName: '',\n            // email: '',\n        },\n        validationSchema: Yup.object({\n            // q1: Yup.bool()\n            //     .required(\"1Choose one\")\n            //     .oneOf([true], 'Field 1 must be checked'),\n            //\n            // q2: Yup.bool()\n            //     .required(\"2Choose one\")\n            //     .oneOf([true], 'Field 2 must be checked'),\n\n            question0: Yup.object({\n                name:Yup.string().required(\"xxx\"),\n                ans: Yup.string().min(3,\"Q1sss\").required(\"Q1 unchecked\"),\n            }).required(\"Q1xxx\"),\n\n            question1: Yup.object({\n                name:Yup.string().required(\"xxx\"),\n                ans: Yup.string().min(3).required(\"Q2 unchecked\"),\n            }),\n            question2: Yup.object({\n                name:Yup.string().required(\"xxx\"),\n                ans: Yup.string().min(3).required(\"Q3 unchecked\"),\n            }),\n            question3: Yup.object({\n                name:Yup.string().required(\"xxx\"),\n                ans: Yup.string().min(3).required(\"Q4 unchecked\"),\n            }),\n            question4: Yup.object({\n                name:Yup.string().required(\"xxx\"),\n                ans: Yup.string().min(3).required(\"Q5 unchecked\"),\n            }),\n            question5: Yup.object({\n                name:Yup.string().required(\"xxx\"),\n                ans: Yup.string().min(3).required(\"Q6 unchecked\"),\n            }),\n            question6: Yup.object({\n                name:Yup.string().required(\"xxx\"),\n                ans: Yup.string().min(3).required(\"Q7 unchecked\"),\n            }),\n            question7: Yup.object({\n                name:Yup.string().required(\"xxx\"),\n                ans: Yup.string().min(3).required(\"Q8 unchecked\"),\n            }),\n            question8: Yup.object({\n                name:Yup.string().required(\"xxx\"),\n                ans: Yup.string().min(3).required(\"Q9 unchecked\"),\n            }),\n            question9: Yup.object({\n                name:Yup.string().required(\"xxx\"),\n                ans: Yup.string().min(3).required(\"Q10 unchecked\"),\n            }),\n\n            // question1: Yup.object().shape({\n            //     ans: string().required(\"Q2 unchecked\"),\n            // })\n\n            // sq0: Yup.string()\n            //     .required(\"Q1 unchecked\"),\n            //\n            // sq1: Yup.string()\n            //     .required(\"Q2 unchecked\"),\n            //\n            // sq2: Yup.string()\n            //     .required(\"Q3 unchecked\"),\n            //\n            // sq3: Yup.string()\n            //     .required(\"Q4 unchecked\"),\n            //\n            // sq4: Yup.string()\n            //     .required(\"Q5 unchecked\"),\n            //\n            // sq5: Yup.string()\n            //     .required(\"Q6 unchecked\"),\n            // sq6: Yup.string()\n            //     .required(\"Q7 unchecked\"),\n            // sq7: Yup.string()\n            //     .required(\"Q8 unchecked\"),\n            // sq8: Yup.string()\n            //     .required(\"Q9 unchecked\"),\n            // sq9: Yup.string()\n            //     .required(\"Q10 unchecked\"),\n\n            // firstName: Yup.string()\n            //     .max(15, 'Must be 15 characters or less')\n            //     .required('Required'),\n            // lastName: Yup.string()\n            //     .max(20, 'Must be 20 characters or less')\n            //     .required('Required'),\n            // email: Yup.string().email('Invalid email address').required('Required'),\n\n        }),\n\n        onSubmit: async values => {\n            let endTime = Date.now();\n            console.log(\"end time!!!\" + endTime)\n            console.log(\"entry time!!!\" + entryTime)\n            let millis = Date.now() - entryTime\n            console.log(\"total time!!!\" + millis)\n\n        //     const newAnswer = {...form};\n        //     await fetch(\"http://localhost:5001/question/add\", {\n        //         method: \"POST\",\n        //         headers: {\n        //             \"Content-Type\": \"application/json\",\n        //         },\n        //         body: JSON.stringify(newAnswer),\n        //     })\n        //         .catch(error => {\n        //             window.alert(error);\n        //             return;\n        //         });\n        //     // values.question1.name\n        //     let temMap = new Map(\n        //         [\"q1\",values.sq0],\n        //     )\n        //     temMap.add\n        //     setForm({millis,\n        //         \"9.9.9\",\n        //     {\"q1\":\"agree\"}\n        //     }\n        // );\n\n            alert(JSON.stringify(values, null, 2));\n\n            Object.keys(formik.initialValues).forEach(\n                function(key){ formik.initialValues[key] = \" \" }\n            );\n\n            // [formik.initialValues].forEach(item =>{\n            //     item.name = ' '\n            //     item.ans = ' '\n            // })\n            // formik.initialValues.question0.name=' ';\n            // formik.initialValues.question0.ans=' ';\n            // formik.initialValues.question1.name=' ';\n            // formik.initialValues.question1.ans=' ';\n            // formik.initialValues.question2.name=' ';\n            // formik.initialValues.question2.ans=' ';\n            // formik.initialValues.question3.name=' ';\n            // formik.initialValues.question3.ans=' ';\n            // formik.initialValues.question9.name=' ';\n            // formik.initialValues.question9.ans=' ';\n\n            formik.initialValues.sq0 = '';\n            formik.initialValues.sq1 = '';\n            formik.initialValues.sq2 = '';\n            formik.initialValues.sq3 = '';\n            formik.initialValues.sq4 = '';\n            formik.initialValues.sq5 = '';\n            formik.initialValues.sq6 = '';\n            formik.initialValues.sq7 = '';\n            formik.initialValues.sq8 = '';\n            formik.initialValues.sq9 = '';\n            setFuns.forEach(func => {\n                func('')\n            })\n        },\n    });\n\n\n    // let [selectedID, setID] = React.useState({\n    //     p1:\"\",\n    //     p2:\"\",\n    //     p3:\"\",\n    //     p4:\"\",\n    //     p5:\"\",\n    // });\n\n    let [selectedID0, setID0] = React.useState(\"\");\n    let [selectedID1, setID1] = React.useState(\"\");\n    let [selectedID2, setID2] = React.useState(\"\");\n    let [selectedID3, setID3] = React.useState(\"\");\n    let [selectedID4, setID4] = React.useState(\"\");\n    let [selectedID5, setID5] = React.useState(\"\");\n    let [selectedID6, setID6] = React.useState(\"\");\n    let [selectedID7, setID7] = React.useState(\"\");\n    let [selectedID8, setID8] = React.useState(\"\");\n    let [selectedID9, setID9] = React.useState(\"\");\n\n    let setFuns = [setID0, setID1, setID2, setID3,setID4,setID5,setID6,setID7,setID8,setID9]\n    let selectedIDs = [selectedID0, selectedID1, selectedID2, selectedID3,selectedID4,selectedID5,selectedID6,selectedID7,selectedID8,selectedID9]\n    function Question(props) {\n        let anss = formik.values[[\"question\"+props.qId]].ans;\n        console.log(\"anss!!:\"+anss+\", index, \"+props.qId+\", length:\"+formik.values[[\"question\"+props.qId]].ans.length)\n        // console.log(formik.errors.question0)\n        return (\n            <Form.Group  controlId=\"formBasicEmail\">\n                <Form.Label className=\"qTitle\" >\n                    Q{props.qId+1}: {props.descri}\n                    { formik.values[[\"question\"+props.qId]].ans.length < 2 ? (\n                        <Badge pill bg=\"danger\">\n                            unchecked\n                            {/*{formik.errors.question1}*/}\n                        </Badge>\n                    ) : \"ok\"}\n                </Form.Label>\n                {/*<div className=\"qWarning\">*/}\n                {/*    {!formik.values[[\"sq\"+props.qId]] ? (*/}\n                {/*        <Badge pill bg=\"danger\">*/}\n                {/*            {formik.errors[[\"sq\"+props.qId]]}*/}\n                {/*        </Badge>*/}\n                {/*    ) : null}*/}\n                {/*</div>*/}\n\n                <Container className=\"qCard\">\n                    <Row  sm={4} md={4}>\n                {['Strongly Agree','Slightly Agree' ,'Agree', 'Neutral', 'Slightly Disagree', 'Disagree', 'Strongly Disagree'].map((ques) => (\n                    <Col key={`${ques}+${props.qId}`} >\n                        <Form.Check\n                            type=\"radio\"\n                            id={`${ques}+${props.qId}`}\n                            name={`${ques}+${props.qId}`}\n                            // label={`${ques}+${props.qId === 1? selectedID1:selectedID2}`}\n                            // label={`${ques}+${props.selectAns}`}\n                            // checked={ques+props.qId === props.selectAns}\n                            // checked={ques+props.qId === (props.qId === 1? selectedID1:selectedID2)}\n                            label={`${ques}`}//+${props.selectId}\n                            checked={ques+props.qId === props.selectId}\n                            onChange={ () => {\n                                // formik.values[\"sq\"+props.qId]= ques;\n\n                                formik.values[\"question\"+props.qId].name = props.qName//+props.qId\n                                formik.values[\"question\"+props.qId].ans = ques\n\n                                setFuns[props.qId](ques+props.qId);\n                                // switch (props.qId){\n                                //     case 1:\n                                //         console.log(\"case1\")\n                                //         setID1(ques+props.qId)\n                                //         break\n                                //     case 2:\n                                //         console.log(\"case2\")\n                                //         setID2(ques+props.qId)\n                                //         break\n                                //     case 3:\n                                //         console.log(\"case3\")\n                                //         setID3(ques+props.qId)\n                                //         break\n                                // }\n                                // if (props.qId===1){\n                                //     setID1(ques+props.qId)\n                                //     console.log(\"onChange, ques+props.qId:\"+ques+props.qId+\", selectedID1:\"+selectedID1)\n                                //\n                                // }else{\n                                //     setID2(ques+props.qId)\n                                //     console.log(\"onChange, ques+props.qId:\"+ques+props.qId+\", selectedID2:\"+selectedID2)\n                                // }\n                                // setID(ques+props.qId)\n                                // console.log(\"onChange, ques+props.qId:\"+ques+props.qId+\", selectedID:\"+selectedID)\n                            }}\n                            // onChange={formik.handleChange}\n                            // onBlur={formik.handleBlur}\n                            // value={formik.values[\"q\"+props.qId]}\n                        />\n                    </Col>\n                ))}\n                    </Row>\n                </Container>\n\n                {/*{formik.touched[\"q\"+props.qId] && formik.errors[[\"q\"+props.qId]] ? (*/}\n                {/*    // <div>{formik.errors[[\"q\"+props.qId]]}</div>*/}\n                {/*{!formik.values[[\"sq\"+props.qId]] ? (*/}\n                {/*    <Badge pill bg=\"danger\">*/}\n                {/*        {formik.errors[[\"sq\"+props.qId]]}*/}\n                {/*    </Badge>*/}\n                {/*) : null}*/}\n            </Form.Group>\n\n        )\n    }\n\n    const [questions, setQuestions] = useState([]);\n    let firstLoad = true;\n    // This method fetches the records from the database.\n    useEffect(() => {\n        if(!firstLoad){\n            return;\n        }\n        setEntryTime(Date.now())\n        console.log(\"entryTime:\"+entryTime)\n\n        // currentTime = Date.now();\n        // console.log(\"time!!!\"+currentTime)\n        firstLoad = false;\n        async function getQuestions() {\n            const response = await fetch(`http://localhost:5001/questionlist/`);\n            if (!response.ok) {\n                const message = `An error occured: ${response.statusText}`;\n                window.alert(message);\n                return;\n            }\n\n            const records = await response.json();\n            shuffleArray(records);\n            setQuestions(records.slice(0,10));\n        }\n        getQuestions();\n\n        return;\n    }, [questions.length]);\n\n    function shuffleArray(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Math.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n    }\n\n    function questionList() {\n        return questions.map((question,index) => {\n            // console.log(\"question!!!: \" + question.questiontext)\n            // console.log(\"index!!!: \" + index)\n            return (\n                <Question\n\n                    descri={question.questiontext}\n                    key={question._id}\n                    qId={index}\n                    qName={question.varname}\n                    selectId = {selectedIDs[index++]}\n\n                    // deleteRecord={() => deleteRecord(record._id)}\n                    // key={record._id}\n                />\n            );\n        });\n    }\n    // let\n    return(\n    <Form  className=\"col-sm-12 col-md-12 mx-2\" onSubmit={formik.handleSubmit}>\n        {/*<Question descri={questions.questiontext}  qId={1} selectId = {selectedIDs[0]} />*/}\n        {/*<Question descri={\"q1 des\"}  qId={1} selectId = {selectedIDs[0]}  />*/}\n        {/*<Question descri={\"q2 des\"}  qId={2} selectId = {selectedID2} />*/}\n        {/*<Question descri={\"q3 des\"}  qId={3} selectId = {selectedID3} />*/}\n\n        <Stack gap={2} className=\"mx-auto\">\n            {questionList()}\n            {/*<Button variant=\"secondary\">Save changes</Button>*/}\n            {/*<Button variant=\"outline-secondary\">Cancel</Button>*/}\n\n            <Container>\n                {/*{[0,1,2,3,4,5,6,7,8,9].map((index)=>{*/}\n                {/*        return !formik.values[\"question\"+index] ? (*/}\n                {/*            <Badge key={index} pill className=\"col mx-1 \" pill bg=\"danger\">*/}\n                {/*                {formik.errors[[\"question\"+index].ans]}*/}\n                {/*            </Badge>*/}\n                {/*        ) : null*/}\n                {/*    }*/}\n                {/*)*/}\n                {/*}*/}\n            </Container>\n\n            <Button className=\"col-4 mx-auto my-4 \" variant=\"secondary\" type=\"submit\">Submit</Button>\n        </Stack>\n\n\n\n        {/*<Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">*/}\n        {/*    <Form.Label>Question 1: Caring for people who have suffered is an important virtue.</Form.Label>*/}\n        {/*    {['Strongly Agree', 'Agree','netural','Slightly Disagree','Disagree','Strongly Disagree'].map((ques) => (*/}\n        {/*        <div key={`${ques}`} className=\"mb-3\" >*/}\n        {/*            <Form.Check*/}\n        {/*                type=\"radio\"*/}\n        {/*                id={`${ques}`}*/}\n        {/*                name={`${ques}`}*/}\n        {/*                label={`${ques}`}*/}\n        {/*                checked={ques === selectedID}*/}\n        {/*                onChange={() => {*/}\n        {/*                    formik.values.q1 = true;*/}\n        {/*                    setID(ques)*/}\n        {/*                }}*/}\n        {/*            />*/}\n        {/*        </div>*/}\n        {/*    ))}*/}\n        {/*    {formik.touched.q1 && formik.errors.q1 ? (*/}\n        {/*        <div>{formik.errors.q1}</div>*/}\n        {/*    ) : null}*/}\n\n        {/*</Form.Group>*/}\n\n\n        {/*<label htmlFor=\"firstName\">First Name</label>*/}\n        {/*<input*/}\n        {/*    id=\"firstName\"*/}\n        {/*    name=\"firstName\"*/}\n        {/*    type=\"text\"*/}\n        {/*    onChange={formik.handleChange}*/}\n        {/*    onBlur={formik.handleBlur}*/}\n        {/*    value={formik.values.firstName}*/}\n        {/*/>*/}\n        {/*{formik.touched.firstName && formik.errors.firstName ? (*/}\n        {/*    <div>{formik.errors.firstName}</div>*/}\n        {/*) : null}*/}\n\n        {/*<label htmlFor=\"lastName\">Last Name</label>*/}\n        {/*<input*/}\n        {/*    id=\"lastName\"*/}\n        {/*    name=\"lastName\"*/}\n        {/*    type=\"text\"*/}\n        {/*    onChange={formik.handleChange}*/}\n        {/*    onBlur={formik.handleBlur}*/}\n        {/*    value={formik.values.lastName}*/}\n        {/*/>*/}\n        {/*{formik.touched.lastName && formik.errors.lastName ? (*/}\n        {/*    <div>{formik.errors.lastName}</div>*/}\n        {/*) : null}*/}\n        {/*<label htmlFor=\"email\">Email Address</label>*/}\n        {/*<input*/}\n        {/*    id=\"email\"*/}\n        {/*    name=\"email\"*/}\n        {/*    type=\"email\"*/}\n        {/*    onChange={formik.handleChange}*/}\n        {/*    onBlur={formik.handleBlur}*/}\n        {/*    value={formik.values.email}*/}\n        {/*/>*/}\n        {/*{formik.touched.email && formik.errors.email ? (*/}\n        {/*    <div>{formik.errors.email}</div>*/}\n        {/*) : null}*/}\n\n        {/*<Button type=\"submit\">Submit</Button>*/}\n    </Form>\n    )\n\n\n}"]},"metadata":{},"sourceType":"module"}