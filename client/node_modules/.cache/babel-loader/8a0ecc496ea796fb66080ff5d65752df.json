{"ast":null,"code":"var _jsxFileName = \"/Users/yze/WebstormProjects/Mern/client/src/components/recordList.js\",\n    _s = $RefreshSig$();\n\n/**\n * The following code will serve as a viewing component for our records.\n * It will fetch all the records in our database through a GET method.\n */\nimport React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Record = props => /*#__PURE__*/_jsxDEV(\"tr\", {\n  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n    children: props.record.name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n    children: props.record.position\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n    children: props.record.level\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      className: \"btn btn-link\",\n      to: `/edit/${props.record._id}`,\n      children: \"Edit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this), \" |\", /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-link\",\n      onClick: () => {\n        props.deleteRecord(props.record._id);\n      },\n      children: \"Delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 9\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 9,\n  columnNumber: 5\n}, this);\n\n_c = Record;\nexport default function RecordList() {\n  _s();\n\n  const [records, setRecords] = useState([]); // This method fetches the records from the database.\n\n  useEffect(() => {\n    async function getRecords() {\n      const response = await fetch(`http://localhost:5000/record/`);\n\n      if (!response.ok) {\n        const message = `An error occured: ${response.statusText}`;\n        window.alert(message);\n        return;\n      }\n\n      const records = await response.json();\n      setRecords(records);\n    }\n\n    getRecords();\n    return;\n  }, [records.length]); // This method will delete a record\n\n  async function deleteRecord(id) {\n    await fetch(`http://localhost:5000/${id}`, {\n      method: \"DELETE\"\n    });\n    const newRecords = records.filter(el => el._id !== id);\n    setRecords(newRecords);\n  } // This method will map out the records on the table\n\n\n  function recordList() {\n    return records.map(record => {\n      return /*#__PURE__*/_jsxDEV(Record, {\n        record: record,\n        deleteRecord: () => deleteRecord(record._id)\n      }, record._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this);\n    });\n  } // This following section will display the table with the records of individuals.\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Record List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table table-striped\",\n      style: {\n        marginTop: 20\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Position\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Level\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Action\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: recordList()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n}\n\n_s(RecordList, \"2hVe065MKzxnAZ4C3qrhRP61L3w=\");\n\n_c2 = RecordList;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Record\");\n$RefreshReg$(_c2, \"RecordList\");","map":{"version":3,"sources":["/Users/yze/WebstormProjects/Mern/client/src/components/recordList.js"],"names":["React","useEffect","useState","Link","Record","props","record","name","position","level","_id","deleteRecord","RecordList","records","setRecords","getRecords","response","fetch","ok","message","statusText","window","alert","json","length","id","method","newRecords","filter","el","recordList","map","marginTop"],"mappings":"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","sourcesContent":["/**\n * The following code will serve as a viewing component for our records.\n * It will fetch all the records in our database through a GET method.\n */\nimport React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Record = (props) => (\n    <tr>\n        <td>{props.record.name}</td>\n        <td>{props.record.position}</td>\n        <td>{props.record.level}</td>\n        <td>\n            <Link className=\"btn btn-link\" to={`/edit/${props.record._id}`}>Edit</Link> |\n            <button className=\"btn btn-link\"\n                    onClick={() => {\n                        props.deleteRecord(props.record._id);\n                    }}\n            >\n                Delete\n            </button>\n        </td>\n    </tr>\n);\n\nexport default function RecordList() {\n    const [records, setRecords] = useState([]);\n\n    // This method fetches the records from the database.\n    useEffect(() => {\n        async function getRecords() {\n            const response = await fetch(`http://localhost:5000/record/`);\n\n            if (!response.ok) {\n                const message = `An error occured: ${response.statusText}`;\n                window.alert(message);\n                return;\n            }\n\n            const records = await response.json();\n            setRecords(records);\n        }\n\n        getRecords();\n\n        return;\n    }, [records.length]);\n\n    // This method will delete a record\n    async function deleteRecord(id) {\n        await fetch(`http://localhost:5000/${id}`, {\n            method: \"DELETE\"\n        });\n\n        const newRecords = records.filter((el) => el._id !== id);\n        setRecords(newRecords);\n    }\n\n    // This method will map out the records on the table\n    function recordList() {\n        return records.map((record) => {\n            return (\n                <Record\n                    record={record}\n                    deleteRecord={() => deleteRecord(record._id)}\n                    key={record._id}\n                />\n            );\n        });\n    }\n\n    // This following section will display the table with the records of individuals.\n    return (\n        <div>\n            <h3>Record List</h3>\n            <table className=\"table table-striped\" style={{ marginTop: 20 }}>\n                <thead>\n                <tr>\n                    <th>Name</th>\n                    <th>Position</th>\n                    <th>Level</th>\n                    <th>Action</th>\n                </tr>\n                </thead>\n                <tbody>{recordList()}</tbody>\n            </table>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}