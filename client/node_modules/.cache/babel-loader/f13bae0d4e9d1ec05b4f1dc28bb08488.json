{"ast":null,"code":"var _jsxFileName = \"/Users/yze/WebstormProjects/Mern/client/src/components/questionarie.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { useNavigate } from \"react-router\";\nimport { Button, Form } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Questionarie() {\n  _s();\n\n  const navigate = useNavigate();\n  const formik = useFormik({\n    initialValues: {\n      q1: false,\n      q2: false,\n      firstName: '',\n      lastName: '',\n      email: ''\n    },\n    validationSchema: Yup.object({\n      q1: Yup.bool().required(\"Choose one\").oneOf([true], 'Field must be checked'),\n      q2: Yup.bool().required(\"Choose one\").oneOf([true], 'Field must be checked'),\n      firstName: Yup.string().max(15, 'Must be 15 characters or less').required('Required'),\n      lastName: Yup.string().max(20, 'Must be 20 characters or less').required('Required') // email: Yup.string().email('Invalid email address').required('Required'),\n\n    }),\n    onSubmit: values => {\n      alert(JSON.stringify(values, null, 2));\n    }\n  });\n  const [selectedID, setID] = React.useState('');\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: formik.handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n      className: \"mb-3\",\n      controlId: \"formBasicEmail\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        children: \"Question 1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"radio\",\n        placeholder: \"Enter email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n        className: \"text-muted\",\n        children: \"We'll never share your email with anyone else.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), ['Strongly Agree', 'Agree', 'netural', 'Slightly Disagree', 'Disagree', 'Strongly Disagree'].map(ques => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: /*#__PURE__*/_jsxDEV(Form.Check, {\n        type: \"radio\",\n        id: `${ques}`,\n        label: `${ques}` // checked={ques === selectedID}\n        // onChange={() => {setID(ques)}}\n        ,\n        onChange: formik.handleChange // onBlur={formik.handleBlur}\n        // value={formik.values.p1}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)\n    }, `${ques}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"firstName\",\n      children: \"First Name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"firstName\",\n      name: \"firstName\",\n      type: \"text\",\n      onChange: formik.handleChange,\n      onBlur: formik.handleBlur,\n      value: formik.values.firstName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this), formik.touched.firstName && formik.errors.firstName ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: formik.errors.firstName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"lastName\",\n      children: \"Last Name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"lastName\",\n      name: \"lastName\",\n      type: \"text\",\n      onChange: formik.handleChange,\n      onBlur: formik.handleBlur,\n      value: formik.values.lastName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this), formik.touched.lastName && formik.errors.lastName ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: formik.errors.lastName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"email\",\n      children: \"Email Address\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"email\",\n      name: \"email\",\n      type: \"email\",\n      onChange: formik.handleChange,\n      onBlur: formik.handleBlur,\n      value: formik.values.email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this), formik.touched.email && formik.errors.email ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: formik.errors.email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this) : null, /*#__PURE__*/_jsxDEV(Button, {\n      type: \"submit\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Questionarie, \"b9oRTaunY0MdZizm43P39PQ3qis=\", false, function () {\n  return [useNavigate, useFormik];\n});\n\n_c = Questionarie;\n\nvar _c;\n\n$RefreshReg$(_c, \"Questionarie\");","map":{"version":3,"sources":["/Users/yze/WebstormProjects/Mern/client/src/components/questionarie.js"],"names":["React","useFormik","Yup","useNavigate","Button","Form","Questionarie","navigate","formik","initialValues","q1","q2","firstName","lastName","email","validationSchema","object","bool","required","oneOf","string","max","onSubmit","values","alert","JSON","stringify","selectedID","setID","useState","handleSubmit","map","ques","handleChange","handleBlur","touched","errors"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {useFormik} from 'formik';\nimport * as Yup from 'yup';\nimport {useNavigate} from \"react-router\";\nimport {Button, Form} from \"react-bootstrap\";\n\nexport default function Questionarie() {\n    const navigate = useNavigate();\n\n\n    const formik = useFormik({\n        initialValues: {\n            q1:false,\n            q2:false,\n            firstName: '',\n            lastName: '',\n            email: '',\n        },\n        validationSchema: Yup.object({\n            q1: Yup.bool()\n                .required(\"Choose one\")\n                .oneOf([true], 'Field must be checked'),\n            q2: Yup.bool()\n                .required(\"Choose one\")\n                .oneOf([true], 'Field must be checked'),\n\n            firstName: Yup.string()\n                .max(15, 'Must be 15 characters or less')\n                .required('Required'),\n            lastName: Yup.string()\n                .max(20, 'Must be 20 characters or less')\n                .required('Required'),\n            // email: Yup.string().email('Invalid email address').required('Required'),\n\n        }),\n        onSubmit: values => {\n            alert(JSON.stringify(values, null, 2));\n        },\n    });\n\n    const [selectedID, setID] = React.useState('');\n\n\n    return(\n    <Form onSubmit={formik.handleSubmit}>\n\n        <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n            <Form.Label>Question 1</Form.Label>\n            <Form.Control type=\"radio\" placeholder=\"Enter email\" />\n            <Form.Text className=\"text-muted\">\n                We'll never share your email with anyone else.\n            </Form.Text>\n        </Form.Group>\n\n        {['Strongly Agree', 'Agree','netural','Slightly Disagree','Disagree','Strongly Disagree'].map((ques) => (\n            <div key={`${ques}`} className=\"mb-3\" >\n                <Form.Check\n                    type=\"radio\"\n                    id={`${ques}`}\n                    label={`${ques}`}\n                    // checked={ques === selectedID}\n                    // onChange={() => {setID(ques)}}\n\n                    onChange={formik.handleChange}\n                    // onBlur={formik.handleBlur}\n                    // value={formik.values.p1}\n                />\n            </div>\n        ))}\n\n\n\n        <label htmlFor=\"firstName\">First Name</label>\n        <input\n            id=\"firstName\"\n            name=\"firstName\"\n            type=\"text\"\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            value={formik.values.firstName}\n        />\n        {formik.touched.firstName && formik.errors.firstName ? (\n            <div>{formik.errors.firstName}</div>\n        ) : null}\n\n        <label htmlFor=\"lastName\">Last Name</label>\n        <input\n            id=\"lastName\"\n            name=\"lastName\"\n            type=\"text\"\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            value={formik.values.lastName}\n        />\n        {formik.touched.lastName && formik.errors.lastName ? (\n            <div>{formik.errors.lastName}</div>\n        ) : null}\n        <label htmlFor=\"email\">Email Address</label>\n        <input\n            id=\"email\"\n            name=\"email\"\n            type=\"email\"\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            value={formik.values.email}\n        />\n        {formik.touched.email && formik.errors.email ? (\n            <div>{formik.errors.email}</div>\n        ) : null}\n\n        <Button type=\"submit\">Submit</Button>\n        {/*<button type=\"submit\">Submit</button>*/}\n    </Form>\n    )\n\n\n}"]},"metadata":{},"sourceType":"module"}