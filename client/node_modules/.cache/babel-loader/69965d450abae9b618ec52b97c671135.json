{"ast":null,"code":"var _jsxFileName = \"/Users/yze/WebstormProjects/Mern/client/src/components/edit.js\",\n    _s = $RefreshSig$();\n\n/**\n * serve as an editing component for our records.\n * It will use a similar layout to the create component\n * and will eventually submit an update command to our server.\n */\nimport React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Edit() {\n  _s();\n\n  const [form, setForm] = useState({\n    name: \"\",\n    position: \"\",\n    level: \"\",\n    records: []\n  });\n  /**\n   * The useParams hook returns an object of key/value pairs of the dynamic params from the current URL\n   * that were matched by the <Route path>.\n   * Child routes inherit all params from their parent routes.\n   */\n\n  const params = useParams();\n  const navigate = useNavigate();\n  useEffect(() => {\n    async function fetchData() {\n      const id = params.id.toString();\n      const response = await fetch(`http://localhost:5001/record/${params.id.toString()}`);\n\n      if (!response.ok) {\n        const message = `An error has occured: ${response.statusText}`;\n        window.alert(message);\n        return;\n      }\n\n      const record = await response.json();\n\n      if (!record) {\n        window.alert(`Record with id ${id} not found`);\n        navigate(\"/\");\n        return;\n      }\n\n      setForm(record);\n    }\n\n    fetchData();\n    return;\n  }, [params.id, navigate]); // These methods will update the state properties.\n\n  function updateForm(value) {\n    return setForm(prev => {\n      return { ...prev,\n        ...value\n      };\n    });\n  }\n\n  async function onSubmit(e) {\n    e.preventDefault();\n    const editedPerson = {\n      name: form.name,\n      position: form.position,\n      level: form.level\n    }; // This will send a post request to update the data in the database.\n\n    await fetch(`http://localhost:5001/update/${params.id}`, {\n      method: \"POST\",\n      body: JSON.stringify(editedPerson),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    navigate(\"/\");\n  } // This following section will display the form that takes input from the user to update the data.\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Update Record\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"name\",\n          children: \"Name: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          id: \"name\",\n          value: form.name,\n          onChange: e => updateForm({\n            name: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"position\",\n          children: \"Position: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          id: \"position\",\n          value: form.position,\n          onChange: e => updateForm({\n            position: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-check form-check-inline\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"form-check-input\",\n            type: \"radio\",\n            name: \"positionOptions\",\n            id: \"positionIntern\",\n            value: \"Intern\",\n            checked: form.level === \"Intern\",\n            onChange: e => updateForm({\n              level: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"positionIntern\",\n            className: \"form-check-label\",\n            children: \"Intern\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-check form-check-inline\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"form-check-input\",\n            type: \"radio\",\n            name: \"positionOptions\",\n            id: \"positionJunior\",\n            value: \"Junior\",\n            checked: form.level === \"Junior\",\n            onChange: e => updateForm({\n              level: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"positionJunior\",\n            className: \"form-check-label\",\n            children: \"Junior\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-check form-check-inline\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"form-check-input\",\n            type: \"radio\",\n            name: \"positionOptions\",\n            id: \"positionSenior\",\n            value: \"Senior\",\n            checked: form.level === \"Senior\",\n            onChange: e => updateForm({\n              level: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"positionSenior\",\n            className: \"form-check-label\",\n            children: \"Senior\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Update Record\",\n          className: \"btn btn-primary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Edit, \"c4DYhdb2kkas8muLBT3uHVTM9rI=\", false, function () {\n  return [useParams, useNavigate];\n});\n\n_c = Edit;\n\nvar _c;\n\n$RefreshReg$(_c, \"Edit\");","map":{"version":3,"sources":["/Users/yze/WebstormProjects/Mern/client/src/components/edit.js"],"names":["React","useState","useEffect","useParams","useNavigate","Edit","form","setForm","name","position","level","records","params","navigate","fetchData","id","toString","response","fetch","ok","message","statusText","window","alert","record","json","updateForm","value","prev","onSubmit","e","preventDefault","editedPerson","method","body","JSON","stringify","headers","target"],"mappings":"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","sourcesContent":["/**\n * serve as an editing component for our records.\n * It will use a similar layout to the create component\n * and will eventually submit an update command to our server.\n */\nimport React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router\";\n\nexport default function Edit() {\n    const [form, setForm] = useState({\n        name: \"\",\n        position: \"\",\n        level: \"\",\n        records: [],\n    });\n\n    /**\n     * The useParams hook returns an object of key/value pairs of the dynamic params from the current URL\n     * that were matched by the <Route path>.\n     * Child routes inherit all params from their parent routes.\n     */\n    const params = useParams();\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        async function fetchData() {\n            const id = params.id.toString();\n            const response = await fetch(`http://localhost:5001/record/${params.id.toString()}`);\n\n            if (!response.ok) {\n                const message = `An error has occured: ${response.statusText}`;\n                window.alert(message);\n                return;\n            }\n\n            const record = await response.json();\n            if (!record) {\n                window.alert(`Record with id ${id} not found`);\n                navigate(\"/\");\n                return;\n            }\n\n            setForm(record);\n        }\n\n        fetchData();\n\n        return;\n    }, [params.id, navigate]);\n\n    // These methods will update the state properties.\n    function updateForm(value) {\n        return setForm((prev) => {\n            return { ...prev, ...value };\n        });\n    }\n\n    async function onSubmit(e) {\n        e.preventDefault();\n        const editedPerson = {\n            name: form.name,\n            position: form.position,\n            level: form.level,\n        };\n\n        // This will send a post request to update the data in the database.\n        await fetch(`http://localhost:5001/update/${params.id}`, {\n            method: \"POST\",\n            body: JSON.stringify(editedPerson),\n            headers: {\n                'Content-Type': 'application/json'\n            },\n        });\n\n        navigate(\"/\");\n    }\n\n    // This following section will display the form that takes input from the user to update the data.\n    return (\n        <div>\n            <h3>Update Record</h3>\n            <form onSubmit={onSubmit}>\n                <div className=\"form-group\">\n                    <label htmlFor=\"name\">Name: </label>\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"name\"\n                        value={form.name}\n                        onChange={(e) => updateForm({ name: e.target.value })}\n                    />\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"position\">Position: </label>\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"position\"\n                        value={form.position}\n                        onChange={(e) => updateForm({ position: e.target.value })}\n                    />\n                </div>\n                <div className=\"form-group\">\n                    <div className=\"form-check form-check-inline\">\n                        <input\n                            className=\"form-check-input\"\n                            type=\"radio\"\n                            name=\"positionOptions\"\n                            id=\"positionIntern\"\n                            value=\"Intern\"\n                            checked={form.level === \"Intern\"}\n                            onChange={(e) => updateForm({ level: e.target.value })}\n                        />\n                        <label htmlFor=\"positionIntern\" className=\"form-check-label\">Intern</label>\n                    </div>\n                    <div className=\"form-check form-check-inline\">\n                        <input\n                            className=\"form-check-input\"\n                            type=\"radio\"\n                            name=\"positionOptions\"\n                            id=\"positionJunior\"\n                            value=\"Junior\"\n                            checked={form.level === \"Junior\"}\n                            onChange={(e) => updateForm({ level: e.target.value })}\n                        />\n                        <label htmlFor=\"positionJunior\" className=\"form-check-label\">Junior</label>\n                    </div>\n                    <div className=\"form-check form-check-inline\">\n                        <input\n                            className=\"form-check-input\"\n                            type=\"radio\"\n                            name=\"positionOptions\"\n                            id=\"positionSenior\"\n                            value=\"Senior\"\n                            checked={form.level === \"Senior\"}\n                            onChange={(e) => updateForm({ level: e.target.value })}\n                        />\n                        <label htmlFor=\"positionSenior\" className=\"form-check-label\">Senior</label>\n                    </div>\n                </div>\n                <br />\n\n                <div className=\"form-group\">\n                    <input\n                        type=\"submit\"\n                        value=\"Update Record\"\n                        className=\"btn btn-primary\"\n                    />\n                </div>\n            </form>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}