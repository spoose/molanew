{"ast":null,"code":"var _jsxFileName = \"/Users/yze/WebstormProjects/Mern/client/src/components/questionarie.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Formik, useField, useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { useNavigate } from \"react-router\";\nimport { Badge, Button, Form } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Questionarie() {\n  _s();\n\n  // const navigate = useNavigate();\n  const formik = useFormik({\n    initialValues: {\n      q1: false,\n      q2: false,\n      a1: '' // firstName: '',\n      // lastName: '',\n      // email: '',\n\n    },\n    validationSchema: Yup.object({\n      q1: Yup.bool().required(\"1Choose one\").oneOf([true], '1Field must be checked'),\n      q2: Yup.bool().required(\"2Choose one\").oneOf([true], '2Field must be checked') // firstName: Yup.string()\n      //     .max(15, 'Must be 15 characters or less')\n      //     .required('Required'),\n      // lastName: Yup.string()\n      //     .max(20, 'Must be 20 characters or less')\n      //     .required('Required'),\n      // email: Yup.string().email('Invalid email address').required('Required'),\n\n    }),\n    onSubmit: values => {\n      alert(JSON.stringify(values, null, 2));\n      formik.values.a1 = selectedID1;\n      formik.initialValues.q1 = false;\n      formik.initialValues.q2 = false;\n      setID1('');\n      setID2('');\n    }\n  });\n  let [selectedID1, setID1] = React.useState('');\n  let [selectedID2, setID2] = React.useState('');\n\n  function Question(props) {\n    // let [selectedID, setID] = React.useState('');\n    return /*#__PURE__*/_jsxDEV(Form.Group, {\n      className: \"mb-3\",\n      controlId: \"formBasicEmail\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        children: [\"Question \", props.qId, \": \", props.descri]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), ['Strongly Agree', 'Agree', 'netural', 'Slightly Disagree', 'Disagree', 'Strongly Disagree'].map(ques => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3\",\n        children: /*#__PURE__*/_jsxDEV(Form.Check, {\n          type: \"radio\",\n          id: `${ques}+${props.qId}`,\n          name: `${ques}+${props.qId}`,\n          label: `${ques}+${props.qId === 1 ? selectedID1 : selectedID2}`,\n          checked: ques + props.qId === (props.qId === 1 ? selectedID1 : selectedID2) // checked={ques+props.qId === selectedID}\n          ,\n          onChange: () => {\n            formik.values[\"q\" + props.qId] = true;\n\n            if (props.qId === 1) {\n              setID1(ques + props.qId);\n              console.log(\"onChange, ques+props.qId:\" + ques + props.qId + \", selectedID1:\" + selectedID1);\n            } else {\n              setID2(ques + props.qId);\n              console.log(\"onChange, ques+props.qId:\" + ques + props.qId + \", selectedID2:\" + selectedID2);\n            } // setID(ques+props.qId)\n            // console.log(\"onChange, ques+props.qId:\"+ques+props.qId+\", selectedID:\"+selectedID)\n\n          } // onChange={formik.handleChange}\n          // onBlur={formik.handleBlur}\n          // value={formik.values[\"q\"+props.qId]}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 25\n        }, this)\n      }, `${ques}+${props.qId}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this)), !formik.values[[\"q\" + props.qId]] ? /*#__PURE__*/_jsxDEV(Badge, {\n        pill: true,\n        bg: \"danger\",\n        children: formik.errors[[\"q\" + props.qId]]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this);\n  } // let\n\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: formik.handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(Question, {\n      descri: \"q1 des\",\n      formikQ: formik.values.q1,\n      qId: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Question, {\n      descri: \"q2 des\",\n      formikQ: formik.values.q2,\n      qId: 2\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"submit\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Questionarie, \"cfaxPtH7mtUiqnwmvzAfmr5/Ceo=\", false, function () {\n  return [useFormik];\n});\n\n_c = Questionarie;\n\nvar _c;\n\n$RefreshReg$(_c, \"Questionarie\");","map":{"version":3,"sources":["/Users/yze/WebstormProjects/Mern/client/src/components/questionarie.js"],"names":["React","Formik","useField","useFormik","Yup","useNavigate","Badge","Button","Form","Questionarie","formik","initialValues","q1","q2","a1","validationSchema","object","bool","required","oneOf","onSubmit","values","alert","JSON","stringify","selectedID1","setID1","setID2","useState","selectedID2","Question","props","qId","descri","map","ques","console","log","errors","handleSubmit"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Formik, useField, useFormik} from 'formik';\nimport * as Yup from 'yup';\nimport {useNavigate} from \"react-router\";\nimport {Badge, Button, Form} from \"react-bootstrap\";\n\nexport default function Questionarie() {\n    // const navigate = useNavigate();\n\n\n    const formik = useFormik({\n        initialValues: {\n            q1:false,\n            q2:false,\n            a1:'',\n            // firstName: '',\n            // lastName: '',\n            // email: '',\n        },\n        validationSchema: Yup.object({\n            q1: Yup.bool()\n                .required(\"1Choose one\")\n                .oneOf([true], '1Field must be checked'),\n\n            q2: Yup.bool()\n                .required(\"2Choose one\")\n                .oneOf([true], '2Field must be checked'),\n\n            // firstName: Yup.string()\n            //     .max(15, 'Must be 15 characters or less')\n            //     .required('Required'),\n            // lastName: Yup.string()\n            //     .max(20, 'Must be 20 characters or less')\n            //     .required('Required'),\n            // email: Yup.string().email('Invalid email address').required('Required'),\n\n        }),\n\n        onSubmit: values => {\n                alert(JSON.stringify(values, null, 2));\n            formik.values.a1 = selectedID1;\n                formik.initialValues.q1 = false;\n                formik.initialValues.q2 = false;\n                setID1('');\n                setID2('');\n        },\n    });\n\n\n    let [selectedID1, setID1] = React.useState('');\n    let [selectedID2, setID2] = React.useState('');\n    function Question(props) {\n        // let [selectedID, setID] = React.useState('');\n        return (\n            <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n                <Form.Label>Question {props.qId}: {props.descri}</Form.Label>\n                {['Strongly Agree', 'Agree', 'netural', 'Slightly Disagree', 'Disagree', 'Strongly Disagree'].map((ques) => (\n                    <div key={`${ques}+${props.qId}`} className=\"mb-3\">\n                        <Form.Check\n                            type=\"radio\"\n                            id={`${ques}+${props.qId}`}\n                            name={`${ques}+${props.qId}`}\n                            label={`${ques}+${props.qId === 1? selectedID1:selectedID2}`}\n                            checked={ques+props.qId === (props.qId === 1? selectedID1:selectedID2)}\n                            // checked={ques+props.qId === selectedID}\n                            onChange={ () => {\n                                formik.values[\"q\"+props.qId] = true;\n                                if (props.qId===1){\n                                    setID1(ques+props.qId)\n                                    console.log(\"onChange, ques+props.qId:\"+ques+props.qId+\", selectedID1:\"+selectedID1)\n\n                                }else{\n                                    setID2(ques+props.qId)\n                                    console.log(\"onChange, ques+props.qId:\"+ques+props.qId+\", selectedID2:\"+selectedID2)\n                                }\n                                // setID(ques+props.qId)\n                                // console.log(\"onChange, ques+props.qId:\"+ques+props.qId+\", selectedID:\"+selectedID)\n                            }}\n\n                            // onChange={formik.handleChange}\n                            // onBlur={formik.handleBlur}\n                            // value={formik.values[\"q\"+props.qId]}\n                        />\n                    </div>\n                ))}\n                {/*{formik.touched[\"q\"+props.qId] && formik.errors[[\"q\"+props.qId]] ? (*/}\n                {/*    // <div>{formik.errors[[\"q\"+props.qId]]}</div>*/}\n                {!formik.values[[\"q\"+props.qId]] ? (\n                    <Badge pill bg=\"danger\">\n                        {formik.errors[[\"q\"+props.qId]]}\n                    </Badge>\n                ) : null}\n            </Form.Group>\n        )\n    }\n\n    // let\n    return(\n    <Form onSubmit={formik.handleSubmit}>\n        <Question descri={\"q1 des\"} formikQ = {formik.values.q1} qId={1}/>\n        <Question descri={\"q2 des\"} formikQ = {formik.values.q2} qId={2}/>\n        {/*<Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">*/}\n        {/*    <Form.Label>Question 1: Caring for people who have suffered is an important virtue.</Form.Label>*/}\n        {/*    {['Strongly Agree', 'Agree','netural','Slightly Disagree','Disagree','Strongly Disagree'].map((ques) => (*/}\n        {/*        <div key={`${ques}`} className=\"mb-3\" >*/}\n        {/*            <Form.Check*/}\n        {/*                type=\"radio\"*/}\n        {/*                id={`${ques}`}*/}\n        {/*                name={`${ques}`}*/}\n        {/*                label={`${ques}`}*/}\n        {/*                checked={ques === selectedID}*/}\n        {/*                onChange={() => {*/}\n        {/*                    formik.values.q1 = true;*/}\n        {/*                    setID(ques)*/}\n        {/*                }}*/}\n        {/*            />*/}\n        {/*        </div>*/}\n        {/*    ))}*/}\n        {/*    {formik.touched.q1 && formik.errors.q1 ? (*/}\n        {/*        <div>{formik.errors.q1}</div>*/}\n        {/*    ) : null}*/}\n\n        {/*</Form.Group>*/}\n\n\n        {/*<label htmlFor=\"firstName\">First Name</label>*/}\n        {/*<input*/}\n        {/*    id=\"firstName\"*/}\n        {/*    name=\"firstName\"*/}\n        {/*    type=\"text\"*/}\n        {/*    onChange={formik.handleChange}*/}\n        {/*    onBlur={formik.handleBlur}*/}\n        {/*    value={formik.values.firstName}*/}\n        {/*/>*/}\n        {/*{formik.touched.firstName && formik.errors.firstName ? (*/}\n        {/*    <div>{formik.errors.firstName}</div>*/}\n        {/*) : null}*/}\n\n        {/*<label htmlFor=\"lastName\">Last Name</label>*/}\n        {/*<input*/}\n        {/*    id=\"lastName\"*/}\n        {/*    name=\"lastName\"*/}\n        {/*    type=\"text\"*/}\n        {/*    onChange={formik.handleChange}*/}\n        {/*    onBlur={formik.handleBlur}*/}\n        {/*    value={formik.values.lastName}*/}\n        {/*/>*/}\n        {/*{formik.touched.lastName && formik.errors.lastName ? (*/}\n        {/*    <div>{formik.errors.lastName}</div>*/}\n        {/*) : null}*/}\n        {/*<label htmlFor=\"email\">Email Address</label>*/}\n        {/*<input*/}\n        {/*    id=\"email\"*/}\n        {/*    name=\"email\"*/}\n        {/*    type=\"email\"*/}\n        {/*    onChange={formik.handleChange}*/}\n        {/*    onBlur={formik.handleBlur}*/}\n        {/*    value={formik.values.email}*/}\n        {/*/>*/}\n        {/*{formik.touched.email && formik.errors.email ? (*/}\n        {/*    <div>{formik.errors.email}</div>*/}\n        {/*) : null}*/}\n\n        {/*<Button type=\"submit\">Submit</Button>*/}\n\n        <Button type=\"submit\">Submit</Button>\n    </Form>\n    )\n\n\n}"]},"metadata":{},"sourceType":"module"}