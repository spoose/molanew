[{"/Users/yze/WebstormProjects/Mern/client/src/index.js":"1","/Users/yze/WebstormProjects/Mern/client/src/App.js":"2","/Users/yze/WebstormProjects/Mern/client/src/components/edit.js":"3","/Users/yze/WebstormProjects/Mern/client/src/components/navbar.js":"4","/Users/yze/WebstormProjects/Mern/client/src/components/recordList.js":"5","/Users/yze/WebstormProjects/Mern/client/src/components/create.js":"6","/Users/yze/WebstormProjects/Mern/client/src/components/questionarie.js":"7","/Users/yze/WebstormProjects/Mern/client/src/components/home.js":"8"},{"size":309,"mtime":1649298438182,"results":"9","hashOfConfig":"10"},{"size":1017,"mtime":1649566105185,"results":"11","hashOfConfig":"10"},{"size":5556,"mtime":1649313223326,"results":"12","hashOfConfig":"10"},{"size":1799,"mtime":1649310164195,"results":"13","hashOfConfig":"10"},{"size":2575,"mtime":1649313096520,"results":"14","hashOfConfig":"10"},{"size":4708,"mtime":1649313096515,"results":"15","hashOfConfig":"10"},{"size":10242,"mtime":1649638452157,"results":"16","hashOfConfig":"10"},{"size":3039,"mtime":1649579072834,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"sxettp",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"21"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"21"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},"/Users/yze/WebstormProjects/Mern/client/src/index.js",[],[],["47","48"],"/Users/yze/WebstormProjects/Mern/client/src/App.js",["49","50","51","52"],[],"import React from \"react\";\n\n// We use Route in order to define the different routes of our application\nimport { Route, Routes } from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// We import all the components we need in our app\nimport Navbar from \"./components/navbar\";\nimport RecordList from \"./components/recordList\";\nimport Edit from \"./components/edit\";\nimport Create from \"./components/create\";\nimport Questionnaire from \"./components/questionarie\";\nimport Home from \"./components/home\";\n\nconst App = () => {\n    return (\n        <div>\n            {/*<Navbar />*/}\n            <Routes>\n                <Route exact path=\"/\" element={<Home />} />\n                {/*<Route exact path=\"/\" element={<RecordList />} />*/}\n                {/*<Route path=\"/edit/:id\" element={<Edit />} />*/}\n                {/*<Route path=\"/create\" element={<Create />} />*/}\n                <Route path=\"/ques\" element={<Questionnaire />} />\n            </Routes>\n        </div>\n    );\n};\n\nexport default App;","/Users/yze/WebstormProjects/Mern/client/src/components/edit.js",[],[],"/Users/yze/WebstormProjects/Mern/client/src/components/navbar.js",["53"],[],"/**\n * In the navbar.js component, we will create a navigation bar\n * that will link us to the required components using the following code.\n */\n\nimport React from \"react\";\n\n// We import bootstrap to make our application look better.\nimport \"bootstrap/dist/css/bootstrap.css\";\n\n// We import NavLink to utilize the react router.\nimport { NavLink } from \"react-router-dom\";\n\n// Here, we display our Navbar\nexport default function Navbar() {\n    return (\n        <div>\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                <NavLink className=\"navbar-brand\" to=\"/\">\n                    <img style={{\"width\" : 25 + '%'}} src=\"https://d3cy9zhslanhfa.cloudfront.net/media/3800C044-6298-4575-A05D5C6B7623EE37/4B45D0EC-3482-4759-82DA37D8EA07D229/webimage-8A27671A-8A53-45DC-89D7BF8537F15A0D.png\"></img>\n                </NavLink>\n                <button\n                    className=\"navbar-toggler\"\n                    type=\"button\"\n                    data-toggle=\"collapse\"\n                    data-target=\"#navbarSupportedContent\"\n                    aria-controls=\"navbarSupportedContent\"\n                    aria-expanded=\"false\"\n                    aria-label=\"Toggle navigation\"\n                >\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul className=\"navbar-nav ml-auto\">\n                        <li className=\"nav-item\">\n                            <NavLink className=\"nav-link\" to=\"/create\">\n                                Create Record\n                            </NavLink>\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n        </div>\n    );\n}","/Users/yze/WebstormProjects/Mern/client/src/components/recordList.js",[],[],"/Users/yze/WebstormProjects/Mern/client/src/components/create.js",[],[],"/Users/yze/WebstormProjects/Mern/client/src/components/questionarie.js",["54","55","56","57","58","59","60","61","62"],[],"import React, {useEffect, useState} from 'react';\nimport {Formik, useField, useFormik} from 'formik';\nimport * as Yup from 'yup';\nimport {useNavigate} from \"react-router\";\nimport {Badge, Button, Col, Container, Form, FormControl, Row, Stack} from \"react-bootstrap\";\nimport '../question.css';\nimport {string} from \"yup\";\nimport {forEach} from \"react-bootstrap/ElementChildren\";\nimport { nanoid } from 'nanoid'\nimport {NavLink} from \"react-router-dom\";\n\nexport default function Questionnaire() {\n    // const navigate = useNavigate();\n    const [entryTime, setEntryTime] = React.useState(Date.now());\n    const navigate = useNavigate();\n    // const [form, setForm] = useState({\n    //     time: 0,\n    //     ip: \"\",\n    //     qMap:new Map,\n    // });\n\n    const formik = useFormik({\n        initialValues: {\n            question0:{\n                name:' ',\n                ans:' '\n            },\n            question1:{\n                name:' ',\n                ans:' '\n            },\n            question2:{\n                name:' ',\n                ans:' '\n            },\n            question3:{\n                name:' ',\n                ans:' '\n            },\n            question4:{\n                name:' ',\n                ans:' '\n            },\n            question5:{\n                name:' ',\n                ans:' '\n            },\n            question6:{\n                name:' ',\n                ans:' '\n            },\n            question7:{\n                name:' ',\n                ans:' '\n            },\n            question8:{\n                name:' ',\n                ans:' '\n            },\n            question9:{\n                name:' ',\n                ans:' '\n            },\n        },\n        validationSchema: Yup.object({\n            question0: Yup.object({\n                name:Yup.string().required(\"xxx\"),\n                ans: Yup.string().min(3,\"Q1sss\").required(\"Q1 unchecked\"),\n            }).required(\"Q1xxx\"),\n\n            question1: Yup.object({\n                name:Yup.string().required(\"xxx\"),\n                ans: Yup.string().min(3).required(\"Q2 unchecked\"),\n            }),\n            question2: Yup.object({\n                name:Yup.string().required(\"xxx\"),\n                ans: Yup.string().min(3).required(\"Q3 unchecked\"),\n            }),\n            question3: Yup.object({\n                name:Yup.string().required(\"xxx\"),\n                ans: Yup.string().min(3).required(\"Q4 unchecked\"),\n            }),\n            question4: Yup.object({\n                name:Yup.string().required(\"xxx\"),\n                ans: Yup.string().min(3).required(\"Q5 unchecked\"),\n            }),\n            question5: Yup.object({\n                name:Yup.string().required(\"xxx\"),\n                ans: Yup.string().min(3).required(\"Q6 unchecked\"),\n            }),\n            question6: Yup.object({\n                name:Yup.string().required(\"xxx\"),\n                ans: Yup.string().min(3).required(\"Q7 unchecked\"),\n            }),\n            question7: Yup.object({\n                name:Yup.string().required(\"xxx\"),\n                ans: Yup.string().min(3).required(\"Q8 unchecked\"),\n            }),\n            question8: Yup.object({\n                name:Yup.string().required(\"xxx\"),\n                ans: Yup.string().min(3).required(\"Q9 unchecked\"),\n            }),\n            question9: Yup.object({\n                name:Yup.string().required(\"xxx\"),\n                ans: Yup.string().min(3).required(\"Q10 unchecked\"),\n            }),\n        }),\n        onSubmit: async values => {\n            let millis = Date.now() - entryTime\n            let temMap = new Map()\n\n            for (let i =0; i<10; i++){\n                temMap.set(values[\"question\"+i].name,values[\"question\"+i].ans)//assign value\n                // console.log(temMap.get(values[\"question\"+i].name))\n                formik.touched[\"question\"+i]= false;//reset formik values\n            }\n            temMap.set(\"id\",nanoid(11))\n            temMap.set(\"time\",millis/1000)\n            // setForm({time:millis,ip:\"8.8.8.8\", qMap:temMap});\n\n            Object.keys(formik.initialValues).forEach(//reset formik values\n                function(key){\n                    formik.initialValues[key].ans = \" \"\n                    formik.initialValues[key].name = \" \"\n                }\n            );\n\n            //http://localhost:5001\n            await fetch(\"/question/add\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify(Object.fromEntries(temMap)),\n            })\n                .catch(error => {\n                    window.alert(error);\n                    return;\n                });\n\n            alert(\"Thank you, we have received your answer!\")\n            alert(JSON.stringify(Object.fromEntries(temMap), null, 2));//\n\n            // alert(JSON.stringify(form, null, 2));\n\n            setFuns.forEach(func => {\n                func('')\n            })\n\n            navigate(\"/\")//back to home page after submit\n        },\n    });\n\n    let [selectedID0, setID0] = React.useState(\"\");\n    let [selectedID1, setID1] = React.useState(\"\");\n    let [selectedID2, setID2] = React.useState(\"\");\n    let [selectedID3, setID3] = React.useState(\"\");\n    let [selectedID4, setID4] = React.useState(\"\");\n    let [selectedID5, setID5] = React.useState(\"\");\n    let [selectedID6, setID6] = React.useState(\"\");\n    let [selectedID7, setID7] = React.useState(\"\");\n    let [selectedID8, setID8] = React.useState(\"\");\n    let [selectedID9, setID9] = React.useState(\"\");\n\n    let setFuns = [setID0, setID1, setID2, setID3,setID4,setID5,setID6,setID7,setID8,setID9]\n    let selectedIDs = [selectedID0, selectedID1, selectedID2, selectedID3,selectedID4,selectedID5,selectedID6,selectedID7,selectedID8,selectedID9]\n\n    function Question(props) {\n        return (\n            <Form.Group  controlId=\"formBasicEmail\">\n                <Form.Label className=\"qTitle\" >\n                    Q{props.qId+1}: {props.descri}\n                    { (formik.values[\"question\"+props.qId].ans<3) && formik.touched[\"question\"+props.qId] ? (\n                        <Badge pill bg=\"danger\">\n                            Q{props.qId+1} unchecked\n                            {/*{formik.errors.question0.ans}*/}\n                        </Badge>\n                    ) : null}\n                </Form.Label>\n\n                <Container className=\"qCard\">\n                    <Row  sm={4} md={4}>\n                        {['Strongly Agree','Agree','Slightly Agree' , 'Neutral', 'Slightly Disagree', 'Disagree', 'Strongly Disagree'].map((ques) => (\n                            <Col key={`${ques}+${props.qId}`} >\n                                <Form.Check\n                                    type=\"radio\"\n                                    id={`${ques}+${props.qId}`}\n                                    name={`${ques}+${props.qId}`}\n                                    label={`${ques}`}//+${props.selectId}\n                                    checked={ques+props.qId === props.selectId}\n                                    onChange={ () => {\n                                        // formik.values[\"sq\"+props.qId]= ques;\n                                        formik.values[\"question\"+props.qId].name = props.qName//+props.qId\n                                        formik.values[\"question\"+props.qId].ans = ques\n                                        setFuns[props.qId](ques+props.qId);\n                                    }}\n                                />\n                            </Col>\n                        ))}\n                    </Row>\n                </Container>\n            </Form.Group>\n        )\n    }\n\n    const [questions, setQuestions] = useState([]);\n    let firstLoad = true;\n    // This method fetches the records from the database.\n    useEffect(() => {\n        if(!firstLoad){\n            return;\n        }\n        setEntryTime(Date.now())\n        firstLoad = false;\n        async function getQuestions() {\n            const response = await fetch(`/questionlist/`);//http://localhost:5001\n            if (!response.ok) {\n                const message = `An error occured: ${response.statusText}`;\n                window.alert(message);\n                return;\n            }\n            const records = await response.json();\n            shuffleArray(records);\n            // console.log(\"records:\"+records)\n            setQuestions(records.slice(0,10));\n        }\n        getQuestions();\n\n        return;\n    }, [questions.length]);\n\n    function shuffleArray(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Math.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n    }\n\n    function QuestionList() {\n        return questions.map((question,index) => {\n            return (\n                <Question\n                    descri={question.questiontext}\n                    key={question._id}\n                    qId={index}\n                    qName={question.varname}\n                    selectId = {selectedIDs[index++]}\n                />\n            );\n        });\n    }\n\n    function uncheckedQues({}){\n        return(\n            <Container>\n                {[0,1,2,3,4,5,6,7,8,9].map((index)=>{\n                    return formik.values[\"question\"+index].ans.length < 3 && formik.touched[\"question\"+index] ? (\n                        <Badge key={index+1} pill className=\"col mx-1 \" pill bg=\"danger\">\n                            Q{index+1} unchecked\n                        </Badge>\n                    ) : null\n                })}\n            </Container>\n        )\n    }\n\n    return(\n        <div>\n            <Button  className=\"btnBack\" variant=\"outline-success\" onClick={()=> navigate(\"/\")}> Back Home</Button>\n            <Form  className=\"col-sm-12 col-md-12 mx-2\" onSubmit={formik.handleSubmit}>\n              <Stack gap={2}>\n                  {QuestionList()}\n                  {uncheckedQues({formik})}\n                  <Button variant=\"outline-success\" className=\"col-4 mx-auto my-4 \"  type=\"submit\">Submit</Button>\n            </Stack>\n            </Form>\n        </div>\n    )\n\n\n}","/Users/yze/WebstormProjects/Mern/client/src/components/home.js",["63","64","65","66"],[],"import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router\";\nimport {Badge, Button, Card, Container, Stack} from \"react-bootstrap\";\nimport {NavLink} from \"react-router-dom\";\nimport '../home.css';\nimport data from \"bootstrap/js/src/dom/data\";\n\nexport default function Home() {\n\n    const navigate = useNavigate();\n    function exportCsv(){\n        let password = prompt('Enter the password to download the file:');\n        async function getCsv() {\n            //http://localhost:5001/\n            const response = await fetch('http://localhost:5001/csv?' + new URLSearchParams({\n                password: password}))\n\n            const blob = await response.blob()\n            const link = document.createElement('a')\n            link.href = URL.createObjectURL(blob)\n            link.download = 'answers.csv'\n            link.click()\n            setTimeout(() => URL.revokeObjectURL(link.href), 0)\n\n            // console.log(response.json())\n            // response.json().then(\n            //     data =>{\n            //         let link = document.createElement('a');\n            //         link.href = encodeURI(data);\n            //         link.download = 'my.csv';\n            //         document.body.appendChild(link);\n            //         link.click();\n            //         document.body.removeChild(link);\n            //         console.log(data)}\n            // )\n\n\n\n            // console.log(JSON.stringify(response))\n            // console.log(encodeURI(response))\n\n\n            if (!response.ok) {\n                const message = `An error occured: ${response.statusText}`;\n                window.alert(message);\n                return;\n            }\n        }\n\n        if(password && password.toLowerCase() === \"molab\"){\n            // window.open(\"folder/history.zip\")\n            getCsv().then( ()=>{\n                    alert(\"Downloaded!\")\n                }\n            )\n        }else if(password){\n            alert(\"incorrect password!! please try again\");\n            exportCsv()\n        }\n    }\n\n    return (\n        <Stack>\n            <Container id=\"welCard\" className=\" mx-auto\" >\n                <h1>\n                    Welcome to <Badge id=\"badge\" pill bg=\"info\">YourMorals.org!</Badge>\n                </h1>\n                <p>\n                    Welcome to YourMorals.org, where you can learn about your own morality, ethics, and/or values, moral values, ethical behaviors, personality, and political preferences\n                    while also contributing to scientific research. We are a group of professors, researchers, and graduate students in social psychology.\n                </p>\n                <Button id=\"btnQues\" className=\"col-4\" onClick={()=>{\n                    navigate(\"/ques\")\n                }}>\n                   Survey\n                </Button>\n\n                <Button className=\"col-4 mx-2 my-4 \" variant=\"secondary\"  onClick={exportCsv}>\n                    Export CSV\n                </Button>\n            </Container>\n        </Stack>\n\n     )\n\n\n}",{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":8,"column":8,"nodeType":"73","messageId":"74","endLine":8,"endColumn":14},{"ruleId":"71","severity":1,"message":"75","line":9,"column":8,"nodeType":"73","messageId":"74","endLine":9,"endColumn":18},{"ruleId":"71","severity":1,"message":"76","line":10,"column":8,"nodeType":"73","messageId":"74","endLine":10,"endColumn":12},{"ruleId":"71","severity":1,"message":"77","line":11,"column":8,"nodeType":"73","messageId":"74","endLine":11,"endColumn":14},{"ruleId":"78","severity":1,"message":"79","line":20,"column":21,"nodeType":"80","endLine":20,"endColumn":226},{"ruleId":"71","severity":1,"message":"81","line":2,"column":9,"nodeType":"73","messageId":"74","endLine":2,"endColumn":15},{"ruleId":"71","severity":1,"message":"82","line":2,"column":17,"nodeType":"73","messageId":"74","endLine":2,"endColumn":25},{"ruleId":"71","severity":1,"message":"83","line":5,"column":46,"nodeType":"73","messageId":"74","endLine":5,"endColumn":57},{"ruleId":"71","severity":1,"message":"84","line":7,"column":9,"nodeType":"73","messageId":"74","endLine":7,"endColumn":15},{"ruleId":"71","severity":1,"message":"85","line":8,"column":9,"nodeType":"73","messageId":"74","endLine":8,"endColumn":16},{"ruleId":"71","severity":1,"message":"86","line":10,"column":9,"nodeType":"73","messageId":"74","endLine":10,"endColumn":16},{"ruleId":"87","severity":1,"message":"88","line":214,"column":21,"nodeType":"89","endLine":214,"endColumn":26},{"ruleId":"90","severity":1,"message":"91","line":255,"column":28,"nodeType":"92","messageId":"93","endLine":255,"endColumn":30},{"ruleId":"94","severity":1,"message":"95","line":260,"column":73,"nodeType":"96","messageId":"97","endLine":260,"endColumn":77},{"ruleId":"71","severity":1,"message":"98","line":1,"column":17,"nodeType":"73","messageId":"74","endLine":1,"endColumn":25},{"ruleId":"71","severity":1,"message":"99","line":3,"column":24,"nodeType":"73","messageId":"74","endLine":3,"endColumn":28},{"ruleId":"71","severity":1,"message":"86","line":4,"column":9,"nodeType":"73","messageId":"74","endLine":4,"endColumn":16},{"ruleId":"71","severity":1,"message":"100","line":6,"column":8,"nodeType":"73","messageId":"74","endLine":6,"endColumn":12},"no-native-reassign",["101"],"no-negated-in-lhs",["102"],"no-unused-vars","'Navbar' is defined but never used.","Identifier","unusedVar","'RecordList' is defined but never used.","'Edit' is defined but never used.","'Create' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Formik' is defined but never used.","'useField' is defined but never used.","'FormControl' is defined but never used.","'string' is defined but never used.","'forEach' is defined but never used.","'NavLink' is defined but never used.","react-hooks/exhaustive-deps","Assignments to the 'firstLoad' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'useState' is defined but never used.","'Card' is defined but never used.","'data' is defined but never used.","no-global-assign","no-unsafe-negation"]